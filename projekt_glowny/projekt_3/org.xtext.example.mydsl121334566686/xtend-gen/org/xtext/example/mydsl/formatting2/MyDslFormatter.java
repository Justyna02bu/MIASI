/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.formatting2;

import Rzutykoscia.DiceExprSuk;
import Rzutykoscia.DiceExprSum;
import Rzutykoscia.SuccessStatement;
import Rzutykoscia.SumStatement;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;

  protected void _format(final SumStatement sumStatement, @Extension final IFormattableDocument document) {
    EList<DiceExprSum> _diceexprsum = sumStatement.getDiceexprsum();
    for (final DiceExprSum diceExprSum : _diceexprsum) {
      document.<DiceExprSum>format(diceExprSum);
    }
  }

  protected void _format(final SuccessStatement successStatement, @Extension final IFormattableDocument document) {
    EList<DiceExprSuk> _diceexprsuk = successStatement.getDiceexprsuk();
    for (final DiceExprSuk diceExprSuk : _diceexprsuk) {
      document.<DiceExprSuk>format(diceExprSuk);
    }
  }

  public void format(final Object successStatement, final IFormattableDocument document) {
    if (successStatement instanceof XtextResource) {
      _format((XtextResource)successStatement, document);
      return;
    } else if (successStatement instanceof SuccessStatement) {
      _format((SuccessStatement)successStatement, document);
      return;
    } else if (successStatement instanceof SumStatement) {
      _format((SumStatement)successStatement, document);
      return;
    } else if (successStatement instanceof EObject) {
      _format((EObject)successStatement, document);
      return;
    } else if (successStatement == null) {
      _format((Void)null, document);
      return;
    } else if (successStatement != null) {
      _format(successStatement, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(successStatement, document).toString());
    }
  }
}
