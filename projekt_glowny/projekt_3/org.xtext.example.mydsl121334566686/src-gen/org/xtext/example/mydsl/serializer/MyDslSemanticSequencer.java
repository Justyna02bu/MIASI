/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.serializer;

import Rzutykoscia.DiceDiscSuk;
import Rzutykoscia.DiceDiscSum;
import Rzutykoscia.DiceExprSuk;
import Rzutykoscia.DiceExprSum;
import Rzutykoscia.DiceMarkSuk;
import Rzutykoscia.DiceMarkSum;
import Rzutykoscia.DiceRerollSuk;
import Rzutykoscia.DiceRerollSum;
import Rzutykoscia.DiscardHigh;
import Rzutykoscia.DiscardKol;
import Rzutykoscia.DiscardNum;
import Rzutykoscia.DiscardThan;
import Rzutykoscia.ExplosionRule;
import Rzutykoscia.FormExpr;
import Rzutykoscia.Language;
import Rzutykoscia.MarkHigh;
import Rzutykoscia.MarkKol;
import Rzutykoscia.MarkNum;
import Rzutykoscia.MarkThan;
import Rzutykoscia.MulExpr;
import Rzutykoscia.MultiDice;
import Rzutykoscia.Num;
import Rzutykoscia.RerollHigh;
import Rzutykoscia.RerollKol;
import Rzutykoscia.RerollNum;
import Rzutykoscia.RerollThan;
import Rzutykoscia.RzutykosciaPackage;
import Rzutykoscia.SingleDice;
import Rzutykoscia.SuccessBasic;
import Rzutykoscia.SuccessMultiplier;
import Rzutykoscia.SuccessStatement;
import Rzutykoscia.SuccessThreshold;
import Rzutykoscia.SumStatement;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RzutykosciaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RzutykosciaPackage.DICE_DISC_SUK:
				sequence_DiceDiscSuk(context, (DiceDiscSuk) semanticObject); 
				return; 
			case RzutykosciaPackage.DICE_DISC_SUM:
				sequence_DiceDiscSum(context, (DiceDiscSum) semanticObject); 
				return; 
			case RzutykosciaPackage.DICE_EXPR_SUK:
				sequence_DiceExprSuk(context, (DiceExprSuk) semanticObject); 
				return; 
			case RzutykosciaPackage.DICE_EXPR_SUM:
				sequence_DiceExprSum(context, (DiceExprSum) semanticObject); 
				return; 
			case RzutykosciaPackage.DICE_MARK_SUK:
				sequence_DiceMarkSuk(context, (DiceMarkSuk) semanticObject); 
				return; 
			case RzutykosciaPackage.DICE_MARK_SUM:
				sequence_DiceMarkSum(context, (DiceMarkSum) semanticObject); 
				return; 
			case RzutykosciaPackage.DICE_REROLL_SUK:
				sequence_DiceRerollSuk(context, (DiceRerollSuk) semanticObject); 
				return; 
			case RzutykosciaPackage.DICE_REROLL_SUM:
				sequence_DiceRerollSum(context, (DiceRerollSum) semanticObject); 
				return; 
			case RzutykosciaPackage.DISCARD_HIGH:
				sequence_DiscardHighest(context, (DiscardHigh) semanticObject); 
				return; 
			case RzutykosciaPackage.DISCARD_KOL:
				sequence_DiscardPosition(context, (DiscardKol) semanticObject); 
				return; 
			case RzutykosciaPackage.DISCARD_NUM:
				sequence_DiscardValue(context, (DiscardNum) semanticObject); 
				return; 
			case RzutykosciaPackage.DISCARD_THAN:
				sequence_DiscardThreshold(context, (DiscardThan) semanticObject); 
				return; 
			case RzutykosciaPackage.EXPLOSION_RULE:
				sequence_ExplosionRule(context, (ExplosionRule) semanticObject); 
				return; 
			case RzutykosciaPackage.FORM_EXPR:
				sequence_Form(context, (FormExpr) semanticObject); 
				return; 
			case RzutykosciaPackage.LANGUAGE:
				sequence_Language(context, (Language) semanticObject); 
				return; 
			case RzutykosciaPackage.MARK_HIGH:
				sequence_MarkHighest(context, (MarkHigh) semanticObject); 
				return; 
			case RzutykosciaPackage.MARK_KOL:
				sequence_MarkPosition(context, (MarkKol) semanticObject); 
				return; 
			case RzutykosciaPackage.MARK_NUM:
				sequence_MarkValue(context, (MarkNum) semanticObject); 
				return; 
			case RzutykosciaPackage.MARK_THAN:
				sequence_MarkThreshold(context, (MarkThan) semanticObject); 
				return; 
			case RzutykosciaPackage.MUL_EXPR:
				sequence_MulExpr(context, (MulExpr) semanticObject); 
				return; 
			case RzutykosciaPackage.MULTI_DICE:
				sequence_MultiDice(context, (MultiDice) semanticObject); 
				return; 
			case RzutykosciaPackage.NUM:
				sequence_Num(context, (Num) semanticObject); 
				return; 
			case RzutykosciaPackage.REROLL_HIGH:
				sequence_RerollHighest(context, (RerollHigh) semanticObject); 
				return; 
			case RzutykosciaPackage.REROLL_KOL:
				sequence_RerollPosition(context, (RerollKol) semanticObject); 
				return; 
			case RzutykosciaPackage.REROLL_NUM:
				sequence_RerollValue(context, (RerollNum) semanticObject); 
				return; 
			case RzutykosciaPackage.REROLL_THAN:
				sequence_RerollThreshold(context, (RerollThan) semanticObject); 
				return; 
			case RzutykosciaPackage.SINGLE_DICE:
				sequence_SingleDice(context, (SingleDice) semanticObject); 
				return; 
			case RzutykosciaPackage.SUCCESS_BASIC:
				sequence_SuccessBasic(context, (SuccessBasic) semanticObject); 
				return; 
			case RzutykosciaPackage.SUCCESS_MULTIPLIER:
				sequence_SuccessMultiplier(context, (SuccessMultiplier) semanticObject); 
				return; 
			case RzutykosciaPackage.SUCCESS_STATEMENT:
				sequence_Sukcesy(context, (SuccessStatement) semanticObject); 
				return; 
			case RzutykosciaPackage.SUCCESS_THRESHOLD:
				sequence_SuccessThreshold(context, (SuccessThreshold) semanticObject); 
				return; 
			case RzutykosciaPackage.SUM_STATEMENT:
				sequence_Sumuj(context, (SumStatement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     RuleSuk returns DiceDiscSuk
	 *     DiceDiscSuk returns DiceDiscSuk
	 *
	 * Constraint:
	 *     discard=Discard
	 * </pre>
	 */
	protected void sequence_DiceDiscSuk(ISerializationContext context, DiceDiscSuk semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.DICE_DISC_SUK__DISCARD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.DICE_DISC_SUK__DISCARD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiceDiscSukAccess().getDiscardDiscardParserRuleCall_1_0(), semanticObject.getDiscard());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RuleSum returns DiceDiscSum
	 *     DiceDiscSum returns DiceDiscSum
	 *
	 * Constraint:
	 *     discard=Discard
	 * </pre>
	 */
	protected void sequence_DiceDiscSum(ISerializationContext context, DiceDiscSum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.DICE_DISC_SUM__DISCARD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.DICE_DISC_SUM__DISCARD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiceDiscSumAccess().getDiscardDiscardParserRuleCall_1_0(), semanticObject.getDiscard());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DiceExprSuk returns DiceExprSuk
	 *
	 * Constraint:
	 *     (sign=Sign? mulexpr=MulExpr (successrule+=RuleSuk successrule+=RuleSuk*)?)
	 * </pre>
	 */
	protected void sequence_DiceExprSuk(ISerializationContext context, DiceExprSuk semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DiceExprSum returns DiceExprSum
	 *
	 * Constraint:
	 *     (sign=Sign? mulexpr=MulExpr (sumrule+=RuleSum sumrule+=RuleSum*)?)
	 * </pre>
	 */
	protected void sequence_DiceExprSum(ISerializationContext context, DiceExprSum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RuleSuk returns DiceMarkSuk
	 *     DiceMarkSuk returns DiceMarkSuk
	 *
	 * Constraint:
	 *     mark=Mark
	 * </pre>
	 */
	protected void sequence_DiceMarkSuk(ISerializationContext context, DiceMarkSuk semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.DICE_MARK_SUK__MARK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.DICE_MARK_SUK__MARK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiceMarkSukAccess().getMarkMarkParserRuleCall_1_0(), semanticObject.getMark());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RuleSum returns DiceMarkSum
	 *     DiceMarkSum returns DiceMarkSum
	 *
	 * Constraint:
	 *     mark=Mark
	 * </pre>
	 */
	protected void sequence_DiceMarkSum(ISerializationContext context, DiceMarkSum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.DICE_MARK_SUM__MARK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.DICE_MARK_SUM__MARK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiceMarkSumAccess().getMarkMarkParserRuleCall_1_0(), semanticObject.getMark());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RuleSuk returns DiceRerollSuk
	 *     DiceRerollSuk returns DiceRerollSuk
	 *
	 * Constraint:
	 *     reroll=Reroll
	 * </pre>
	 */
	protected void sequence_DiceRerollSuk(ISerializationContext context, DiceRerollSuk semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.DICE_REROLL_SUK__REROLL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.DICE_REROLL_SUK__REROLL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiceRerollSukAccess().getRerollRerollParserRuleCall_1_0(), semanticObject.getReroll());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RuleSum returns DiceRerollSum
	 *     DiceRerollSum returns DiceRerollSum
	 *
	 * Constraint:
	 *     reroll=Reroll
	 * </pre>
	 */
	protected void sequence_DiceRerollSum(ISerializationContext context, DiceRerollSum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.DICE_REROLL_SUM__REROLL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.DICE_REROLL_SUM__REROLL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiceRerollSumAccess().getRerollRerollParserRuleCall_1_0(), semanticObject.getReroll());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Discard returns DiscardHigh
	 *     DiscardHighest returns DiscardHigh
	 *
	 * Constraint:
	 *     hightlow=HighLow
	 * </pre>
	 */
	protected void sequence_DiscardHighest(ISerializationContext context, DiscardHigh semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.DISCARD_HIGH__HIGHTLOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.DISCARD_HIGH__HIGHTLOW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiscardHighestAccess().getHightlowHighLowEnumRuleCall_0(), semanticObject.getHightlow());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Discard returns DiscardKol
	 *     DiscardPosition returns DiscardKol
	 *
	 * Constraint:
	 *     (num=Num firstlast=FirstLast)
	 * </pre>
	 */
	protected void sequence_DiscardPosition(ISerializationContext context, DiscardKol semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.DISCARD_KOL__NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.DISCARD_KOL__NUM));
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.DISCARD_KOL__FIRSTLAST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.DISCARD_KOL__FIRSTLAST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiscardPositionAccess().getNumNumParserRuleCall_0_0(), semanticObject.getNum());
		feeder.accept(grammarAccess.getDiscardPositionAccess().getFirstlastFirstLastEnumRuleCall_1_0(), semanticObject.getFirstlast());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Discard returns DiscardThan
	 *     DiscardThreshold returns DiscardThan
	 *
	 * Constraint:
	 *     (hightlow=HighLow num=Num)
	 * </pre>
	 */
	protected void sequence_DiscardThreshold(ISerializationContext context, DiscardThan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.DISCARD_THAN__HIGHTLOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.DISCARD_THAN__HIGHTLOW));
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.DISCARD_THAN__NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.DISCARD_THAN__NUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiscardThresholdAccess().getHightlowHighLowEnumRuleCall_0_0(), semanticObject.getHightlow());
		feeder.accept(grammarAccess.getDiscardThresholdAccess().getNumNumParserRuleCall_1_0(), semanticObject.getNum());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Discard returns DiscardNum
	 *     DiscardValue returns DiscardNum
	 *
	 * Constraint:
	 *     num=Num
	 * </pre>
	 */
	protected void sequence_DiscardValue(ISerializationContext context, DiscardNum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.DISCARD_NUM__NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.DISCARD_NUM__NUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiscardValueAccess().getNumNumParserRuleCall_0(), semanticObject.getNum());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RuleSum returns ExplosionRule
	 *     ExplosionRule returns ExplosionRule
	 *
	 * Constraint:
	 *     (sign=Sign num=Num)
	 * </pre>
	 */
	protected void sequence_ExplosionRule(ISerializationContext context, ExplosionRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.EXPLOSION_RULE__SIGN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.EXPLOSION_RULE__SIGN));
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.EXPLOSION_RULE__NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.EXPLOSION_RULE__NUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExplosionRuleAccess().getSignSignEnumRuleCall_0_0(), semanticObject.getSign());
		feeder.accept(grammarAccess.getExplosionRuleAccess().getNumNumParserRuleCall_2_0(), semanticObject.getNum());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Form returns FormExpr
	 *
	 * Constraint:
	 *     (left=Dice (operator=Operator right=Num)?)
	 * </pre>
	 */
	protected void sequence_Form(ISerializationContext context, FormExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Language returns Language
	 *
	 * Constraint:
	 *     statement=Stat
	 * </pre>
	 */
	protected void sequence_Language(ISerializationContext context, Language semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.LANGUAGE__STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.LANGUAGE__STATEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLanguageAccess().getStatementStatParserRuleCall_0(), semanticObject.getStatement());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Mark returns MarkHigh
	 *     MarkHighest returns MarkHigh
	 *
	 * Constraint:
	 *     hightlow=HighLow
	 * </pre>
	 */
	protected void sequence_MarkHighest(ISerializationContext context, MarkHigh semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.MARK_HIGH__HIGHTLOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.MARK_HIGH__HIGHTLOW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMarkHighestAccess().getHightlowHighLowEnumRuleCall_0(), semanticObject.getHightlow());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Mark returns MarkKol
	 *     MarkPosition returns MarkKol
	 *
	 * Constraint:
	 *     (num=Num firstlast=FirstLast)
	 * </pre>
	 */
	protected void sequence_MarkPosition(ISerializationContext context, MarkKol semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.MARK_KOL__NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.MARK_KOL__NUM));
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.MARK_KOL__FIRSTLAST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.MARK_KOL__FIRSTLAST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMarkPositionAccess().getNumNumParserRuleCall_0_0(), semanticObject.getNum());
		feeder.accept(grammarAccess.getMarkPositionAccess().getFirstlastFirstLastEnumRuleCall_1_0(), semanticObject.getFirstlast());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Mark returns MarkThan
	 *     MarkThreshold returns MarkThan
	 *
	 * Constraint:
	 *     (hightlow=HighLow num=Num)
	 * </pre>
	 */
	protected void sequence_MarkThreshold(ISerializationContext context, MarkThan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.MARK_THAN__HIGHTLOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.MARK_THAN__HIGHTLOW));
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.MARK_THAN__NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.MARK_THAN__NUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMarkThresholdAccess().getHightlowHighLowEnumRuleCall_0_0(), semanticObject.getHightlow());
		feeder.accept(grammarAccess.getMarkThresholdAccess().getNumNumParserRuleCall_1_0(), semanticObject.getNum());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Mark returns MarkNum
	 *     MarkValue returns MarkNum
	 *
	 * Constraint:
	 *     num=Num
	 * </pre>
	 */
	protected void sequence_MarkValue(ISerializationContext context, MarkNum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.MARK_NUM__NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.MARK_NUM__NUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMarkValueAccess().getNumNumParserRuleCall_0(), semanticObject.getNum());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MulExpr returns MulExpr
	 *
	 * Constraint:
	 *     ((formexpr=Form num=Num?) | (formexpr=Form num=Num?))
	 * </pre>
	 */
	protected void sequence_MulExpr(ISerializationContext context, MulExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MultiDice returns MultiDice
	 *     Dice returns MultiDice
	 *
	 * Constraint:
	 *     (count=Num sides=Num)
	 * </pre>
	 */
	protected void sequence_MultiDice(ISerializationContext context, MultiDice semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.MULTI_DICE__COUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.MULTI_DICE__COUNT));
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.DICE__SIDES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.DICE__SIDES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiDiceAccess().getCountNumParserRuleCall_0_0(), semanticObject.getCount());
		feeder.accept(grammarAccess.getMultiDiceAccess().getSidesNumParserRuleCall_2_0(), semanticObject.getSides());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Num returns Num
	 *
	 * Constraint:
	 *     value=EInt
	 * </pre>
	 */
	protected void sequence_Num(ISerializationContext context, Num semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.NUM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.NUM__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumAccess().getValueEIntParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Reroll returns RerollHigh
	 *     RerollHighest returns RerollHigh
	 *
	 * Constraint:
	 *     hightlow=HighLow
	 * </pre>
	 */
	protected void sequence_RerollHighest(ISerializationContext context, RerollHigh semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.REROLL_HIGH__HIGHTLOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.REROLL_HIGH__HIGHTLOW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRerollHighestAccess().getHightlowHighLowEnumRuleCall_0(), semanticObject.getHightlow());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Reroll returns RerollKol
	 *     RerollPosition returns RerollKol
	 *
	 * Constraint:
	 *     (num=Num firstlast=FirstLast)
	 * </pre>
	 */
	protected void sequence_RerollPosition(ISerializationContext context, RerollKol semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.REROLL_KOL__NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.REROLL_KOL__NUM));
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.REROLL_KOL__FIRSTLAST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.REROLL_KOL__FIRSTLAST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRerollPositionAccess().getNumNumParserRuleCall_0_0(), semanticObject.getNum());
		feeder.accept(grammarAccess.getRerollPositionAccess().getFirstlastFirstLastEnumRuleCall_1_0(), semanticObject.getFirstlast());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Reroll returns RerollThan
	 *     RerollThreshold returns RerollThan
	 *
	 * Constraint:
	 *     (hightlow=HighLow num=Num)
	 * </pre>
	 */
	protected void sequence_RerollThreshold(ISerializationContext context, RerollThan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.REROLL_THAN__HIGHTLOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.REROLL_THAN__HIGHTLOW));
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.REROLL_THAN__NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.REROLL_THAN__NUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRerollThresholdAccess().getHightlowHighLowEnumRuleCall_0_0(), semanticObject.getHightlow());
		feeder.accept(grammarAccess.getRerollThresholdAccess().getNumNumParserRuleCall_1_0(), semanticObject.getNum());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Reroll returns RerollNum
	 *     RerollValue returns RerollNum
	 *
	 * Constraint:
	 *     num=Num
	 * </pre>
	 */
	protected void sequence_RerollValue(ISerializationContext context, RerollNum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.REROLL_NUM__NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.REROLL_NUM__NUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRerollValueAccess().getNumNumParserRuleCall_0(), semanticObject.getNum());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SingleDice returns SingleDice
	 *     Dice returns SingleDice
	 *
	 * Constraint:
	 *     sides=Num
	 * </pre>
	 */
	protected void sequence_SingleDice(ISerializationContext context, SingleDice semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.DICE__SIDES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.DICE__SIDES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSingleDiceAccess().getSidesNumParserRuleCall_1_0(), semanticObject.getSides());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RuleSuk returns SuccessBasic
	 *     SuccessBasic returns SuccessBasic
	 *
	 * Constraint:
	 *     num=Num
	 * </pre>
	 */
	protected void sequence_SuccessBasic(ISerializationContext context, SuccessBasic semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.SUCCESS_BASIC__NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.SUCCESS_BASIC__NUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSuccessBasicAccess().getNumNumParserRuleCall_0(), semanticObject.getNum());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RuleSuk returns SuccessMultiplier
	 *     SuccessMultiplier returns SuccessMultiplier
	 *
	 * Constraint:
	 *     (num=Num sign=Sign? mult=Num)
	 * </pre>
	 */
	protected void sequence_SuccessMultiplier(ISerializationContext context, SuccessMultiplier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RuleSuk returns SuccessThreshold
	 *     SuccessThreshold returns SuccessThreshold
	 *
	 * Constraint:
	 *     (hightlow=HighLow num=Num)
	 * </pre>
	 */
	protected void sequence_SuccessThreshold(ISerializationContext context, SuccessThreshold semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.SUCCESS_THRESHOLD__HIGHTLOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.SUCCESS_THRESHOLD__HIGHTLOW));
			if (transientValues.isValueTransient(semanticObject, RzutykosciaPackage.Literals.SUCCESS_THRESHOLD__NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RzutykosciaPackage.Literals.SUCCESS_THRESHOLD__NUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSuccessThresholdAccess().getHightlowHighLowEnumRuleCall_0_0(), semanticObject.getHightlow());
		feeder.accept(grammarAccess.getSuccessThresholdAccess().getNumNumParserRuleCall_1_0(), semanticObject.getNum());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Stat returns SuccessStatement
	 *     Sukcesy returns SuccessStatement
	 *
	 * Constraint:
	 *     (diceexprsuk+=DiceExprSuk diceexprsuk+=DiceExprSuk*)
	 * </pre>
	 */
	protected void sequence_Sukcesy(ISerializationContext context, SuccessStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Stat returns SumStatement
	 *     Sumuj returns SumStatement
	 *
	 * Constraint:
	 *     (diceexprsum+=DiceExprSum diceexprsum+=DiceExprSum*)
	 * </pre>
	 */
	protected void sequence_Sumuj(ISerializationContext context, SumStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
