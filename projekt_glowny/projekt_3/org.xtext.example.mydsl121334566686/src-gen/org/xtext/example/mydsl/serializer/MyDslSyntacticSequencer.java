/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Sukcesy_LineFeedKeyword_1_q;
	protected AbstractElementAlias match_Sukcesy_LineFeedKeyword_4_q;
	protected AbstractElementAlias match_Sukcesy___CommaKeyword_5_1_or_FullStopKeyword_5_0__q;
	protected AbstractElementAlias match_Sumuj_LineFeedKeyword_1_q;
	protected AbstractElementAlias match_Sumuj_LineFeedKeyword_4_q;
	protected AbstractElementAlias match_Sumuj___CommaKeyword_5_1_or_FullStopKeyword_5_0__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Sukcesy_LineFeedKeyword_1_q = new TokenAlias(false, true, grammarAccess.getSukcesyAccess().getLineFeedKeyword_1());
		match_Sukcesy_LineFeedKeyword_4_q = new TokenAlias(false, true, grammarAccess.getSukcesyAccess().getLineFeedKeyword_4());
		match_Sukcesy___CommaKeyword_5_1_or_FullStopKeyword_5_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getSukcesyAccess().getCommaKeyword_5_1()), new TokenAlias(false, false, grammarAccess.getSukcesyAccess().getFullStopKeyword_5_0()));
		match_Sumuj_LineFeedKeyword_1_q = new TokenAlias(false, true, grammarAccess.getSumujAccess().getLineFeedKeyword_1());
		match_Sumuj_LineFeedKeyword_4_q = new TokenAlias(false, true, grammarAccess.getSumujAccess().getLineFeedKeyword_4());
		match_Sumuj___CommaKeyword_5_1_or_FullStopKeyword_5_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getSumujAccess().getCommaKeyword_5_1()), new TokenAlias(false, false, grammarAccess.getSumujAccess().getFullStopKeyword_5_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getDRule())
			return getDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal D: 'd';
	 */
	protected String getDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "d";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Sukcesy_LineFeedKeyword_1_q.equals(syntax))
				emit_Sukcesy_LineFeedKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Sukcesy_LineFeedKeyword_4_q.equals(syntax))
				emit_Sukcesy_LineFeedKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Sukcesy___CommaKeyword_5_1_or_FullStopKeyword_5_0__q.equals(syntax))
				emit_Sukcesy___CommaKeyword_5_1_or_FullStopKeyword_5_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Sumuj_LineFeedKeyword_1_q.equals(syntax))
				emit_Sumuj_LineFeedKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Sumuj_LineFeedKeyword_4_q.equals(syntax))
				emit_Sumuj_LineFeedKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Sumuj___CommaKeyword_5_1_or_FullStopKeyword_5_0__q.equals(syntax))
				emit_Sumuj___CommaKeyword_5_1_or_FullStopKeyword_5_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '
	  *     '?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'Sukcesy' (ambiguity) diceexprsuk+=DiceExprSuk
	 
	 * </pre>
	 */
	protected void emit_Sukcesy_LineFeedKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '
	  *     '?
	 *
	 * This ambiguous syntax occurs at:
	 *     diceexprsuk+=DiceExprSuk (ambiguity) ('.' | ',')? (rule end)
	 
	 * </pre>
	 */
	protected void emit_Sukcesy_LineFeedKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('.' | ',')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         diceexprsuk+=DiceExprSuk 
	 *         '
	 *         '? 
	 *         (ambiguity) 
	 *         (rule end)
	 *     )
	 
	 * </pre>
	 */
	protected void emit_Sukcesy___CommaKeyword_5_1_or_FullStopKeyword_5_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '
	  *     '?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'Sumuj' (ambiguity) diceexprsum+=DiceExprSum
	 
	 * </pre>
	 */
	protected void emit_Sumuj_LineFeedKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '
	  *     '?
	 *
	 * This ambiguous syntax occurs at:
	 *     diceexprsum+=DiceExprSum (ambiguity) ('.' | ',')? (rule end)
	 
	 * </pre>
	 */
	protected void emit_Sumuj_LineFeedKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('.' | ',')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         diceexprsum+=DiceExprSum 
	 *         '
	 *         '? 
	 *         (ambiguity) 
	 *         (rule end)
	 *     )
	 
	 * </pre>
	 */
	protected void emit_Sumuj___CommaKeyword_5_1_or_FullStopKeyword_5_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
