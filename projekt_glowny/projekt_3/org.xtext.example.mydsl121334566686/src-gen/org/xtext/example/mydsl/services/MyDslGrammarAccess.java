/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class LanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Language");
		private final Assignment cStatementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementStatParserRuleCall_0 = (RuleCall)cStatementAssignment.eContents().get(0);
		
		//Language returns rzuty::Language:
		//    statement=Stat
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statement=Stat
		public Assignment getStatementAssignment() { return cStatementAssignment; }
		
		//Stat
		public RuleCall getStatementStatParserRuleCall_0() { return cStatementStatParserRuleCall_0; }
	}
	public class StatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Stat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSumujParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSukcesyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Stat returns rzuty::Stat:
		//    (Sumuj | Sukcesy)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Sumuj | Sukcesy)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sumuj
		public RuleCall getSumujParserRuleCall_0() { return cSumujParserRuleCall_0; }
		
		//Sukcesy
		public RuleCall getSukcesyParserRuleCall_1() { return cSukcesyParserRuleCall_1; }
	}
	public class SumujElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Sumuj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSumujKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLineFeedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDiceexprsumAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDiceexprsumDiceExprSumParserRuleCall_2_0 = (RuleCall)cDiceexprsumAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDiceexprsumAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDiceexprsumDiceExprSumParserRuleCall_3_1_0 = (RuleCall)cDiceexprsumAssignment_3_1.eContents().get(0);
		private final Keyword cLineFeedKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cFullStopKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cCommaKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//// SUMUJ ...
		//Sumuj returns rzuty::SumStatement:
		//    'Sumuj' ('\n')?
		//    diceexprsum+=DiceExprSum ( ';' diceexprsum+=DiceExprSum )* ('\n')?
		//    ('.' | ',')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sumuj' ('\n')?
		//diceexprsum+=DiceExprSum ( ';' diceexprsum+=DiceExprSum )* ('\n')?
		//('.' | ',')?
		public Group getGroup() { return cGroup; }
		
		//'Sumuj'
		public Keyword getSumujKeyword_0() { return cSumujKeyword_0; }
		
		//('\n')?
		public Keyword getLineFeedKeyword_1() { return cLineFeedKeyword_1; }
		
		//diceexprsum+=DiceExprSum
		public Assignment getDiceexprsumAssignment_2() { return cDiceexprsumAssignment_2; }
		
		//DiceExprSum
		public RuleCall getDiceexprsumDiceExprSumParserRuleCall_2_0() { return cDiceexprsumDiceExprSumParserRuleCall_2_0; }
		
		//( ';' diceexprsum+=DiceExprSum )*
		public Group getGroup_3() { return cGroup_3; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0() { return cSemicolonKeyword_3_0; }
		
		//diceexprsum+=DiceExprSum
		public Assignment getDiceexprsumAssignment_3_1() { return cDiceexprsumAssignment_3_1; }
		
		//DiceExprSum
		public RuleCall getDiceexprsumDiceExprSumParserRuleCall_3_1_0() { return cDiceexprsumDiceExprSumParserRuleCall_3_1_0; }
		
		//('\n')?
		public Keyword getLineFeedKeyword_4() { return cLineFeedKeyword_4; }
		
		//('.' | ',')?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'.'
		public Keyword getFullStopKeyword_5_0() { return cFullStopKeyword_5_0; }
		
		//','
		public Keyword getCommaKeyword_5_1() { return cCommaKeyword_5_1; }
	}
	public class SukcesyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Sukcesy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSukcesyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLineFeedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDiceexprsukAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDiceexprsukDiceExprSukParserRuleCall_2_0 = (RuleCall)cDiceexprsukAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDiceexprsukAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDiceexprsukDiceExprSukParserRuleCall_3_1_0 = (RuleCall)cDiceexprsukAssignment_3_1.eContents().get(0);
		private final Keyword cLineFeedKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cFullStopKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cCommaKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//// SUKCESY ...
		//Sukcesy returns rzuty::SuccessStatement:
		//    'Sukcesy' ('\n')?
		//    diceexprsuk+=DiceExprSuk ( ';' diceexprsuk+=DiceExprSuk )* ('\n')?
		//    ('.' | ',')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sukcesy' ('\n')?
		//diceexprsuk+=DiceExprSuk ( ';' diceexprsuk+=DiceExprSuk )* ('\n')?
		//('.' | ',')?
		public Group getGroup() { return cGroup; }
		
		//'Sukcesy'
		public Keyword getSukcesyKeyword_0() { return cSukcesyKeyword_0; }
		
		//('\n')?
		public Keyword getLineFeedKeyword_1() { return cLineFeedKeyword_1; }
		
		//diceexprsuk+=DiceExprSuk
		public Assignment getDiceexprsukAssignment_2() { return cDiceexprsukAssignment_2; }
		
		//DiceExprSuk
		public RuleCall getDiceexprsukDiceExprSukParserRuleCall_2_0() { return cDiceexprsukDiceExprSukParserRuleCall_2_0; }
		
		//( ';' diceexprsuk+=DiceExprSuk )*
		public Group getGroup_3() { return cGroup_3; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0() { return cSemicolonKeyword_3_0; }
		
		//diceexprsuk+=DiceExprSuk
		public Assignment getDiceexprsukAssignment_3_1() { return cDiceexprsukAssignment_3_1; }
		
		//DiceExprSuk
		public RuleCall getDiceexprsukDiceExprSukParserRuleCall_3_1_0() { return cDiceexprsukDiceExprSukParserRuleCall_3_1_0; }
		
		//('\n')?
		public Keyword getLineFeedKeyword_4() { return cLineFeedKeyword_4; }
		
		//('.' | ',')?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'.'
		public Keyword getFullStopKeyword_5_0() { return cFullStopKeyword_5_0; }
		
		//','
		public Keyword getCommaKeyword_5_1() { return cCommaKeyword_5_1; }
	}
	public class DiceExprSumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DiceExprSum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignSignEnumRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Assignment cMulexprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMulexprMulExprParserRuleCall_1_0 = (RuleCall)cMulexprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSumruleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSumruleRuleSumParserRuleCall_2_1_0 = (RuleCall)cSumruleAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSumruleAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSumruleRuleSumParserRuleCall_2_2_1_0 = (RuleCall)cSumruleAssignment_2_2_1.eContents().get(0);
		
		//// suma rzut√≥w
		//DiceExprSum returns rzuty::DiceExprSum:
		//    (sign=Sign)? mulexpr=MulExpr
		//    (':' sumrule+=RuleSum (',' sumrule+=RuleSum)*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(sign=Sign)? mulexpr=MulExpr
		//(':' sumrule+=RuleSum (',' sumrule+=RuleSum)*)?
		public Group getGroup() { return cGroup; }
		
		//(sign=Sign)?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }
		
		//Sign
		public RuleCall getSignSignEnumRuleCall_0_0() { return cSignSignEnumRuleCall_0_0; }
		
		//mulexpr=MulExpr
		public Assignment getMulexprAssignment_1() { return cMulexprAssignment_1; }
		
		//MulExpr
		public RuleCall getMulexprMulExprParserRuleCall_1_0() { return cMulexprMulExprParserRuleCall_1_0; }
		
		//(':' sumrule+=RuleSum (',' sumrule+=RuleSum)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//sumrule+=RuleSum
		public Assignment getSumruleAssignment_2_1() { return cSumruleAssignment_2_1; }
		
		//RuleSum
		public RuleCall getSumruleRuleSumParserRuleCall_2_1_0() { return cSumruleRuleSumParserRuleCall_2_1_0; }
		
		//(',' sumrule+=RuleSum)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//sumrule+=RuleSum
		public Assignment getSumruleAssignment_2_2_1() { return cSumruleAssignment_2_2_1; }
		
		//RuleSum
		public RuleCall getSumruleRuleSumParserRuleCall_2_2_1_0() { return cSumruleRuleSumParserRuleCall_2_2_1_0; }
	}
	public class DiceExprSukElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DiceExprSuk");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignSignEnumRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Assignment cMulexprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMulexprMulExprParserRuleCall_1_0 = (RuleCall)cMulexprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuccessruleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuccessruleRuleSukParserRuleCall_2_1_0 = (RuleCall)cSuccessruleAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSuccessruleAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSuccessruleRuleSukParserRuleCall_2_2_1_0 = (RuleCall)cSuccessruleAssignment_2_2_1.eContents().get(0);
		
		//// sukcesy rzut√≥w
		//DiceExprSuk returns rzuty::DiceExprSuk:
		//    (sign=Sign)? mulexpr=MulExpr
		//    (':' successrule+=RuleSuk (',' successrule+=RuleSuk)*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(sign=Sign)? mulexpr=MulExpr
		//(':' successrule+=RuleSuk (',' successrule+=RuleSuk)*)?
		public Group getGroup() { return cGroup; }
		
		//(sign=Sign)?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }
		
		//Sign
		public RuleCall getSignSignEnumRuleCall_0_0() { return cSignSignEnumRuleCall_0_0; }
		
		//mulexpr=MulExpr
		public Assignment getMulexprAssignment_1() { return cMulexprAssignment_1; }
		
		//MulExpr
		public RuleCall getMulexprMulExprParserRuleCall_1_0() { return cMulexprMulExprParserRuleCall_1_0; }
		
		//(':' successrule+=RuleSuk (',' successrule+=RuleSuk)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//successrule+=RuleSuk
		public Assignment getSuccessruleAssignment_2_1() { return cSuccessruleAssignment_2_1; }
		
		//RuleSuk
		public RuleCall getSuccessruleRuleSukParserRuleCall_2_1_0() { return cSuccessruleRuleSukParserRuleCall_2_1_0; }
		
		//(',' successrule+=RuleSuk)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//successrule+=RuleSuk
		public Assignment getSuccessruleAssignment_2_2_1() { return cSuccessruleAssignment_2_2_1; }
		
		//RuleSuk
		public RuleCall getSuccessruleRuleSukParserRuleCall_2_2_1_0() { return cSuccessruleRuleSukParserRuleCall_2_2_1_0; }
	}
	public class MulExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MulExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFormexprAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFormexprFormParserRuleCall_0_0_0 = (RuleCall)cFormexprAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cRazyKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNumAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNumNumParserRuleCall_0_1_1_0 = (RuleCall)cNumAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFormexprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFormexprFormParserRuleCall_1_1_0 = (RuleCall)cFormexprAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cRazyKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cNumAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cNumNumParserRuleCall_1_3_1_0 = (RuleCall)cNumAssignment_1_3_1.eContents().get(0);
		
		//// mno≈ºenie (razy)
		//MulExpr returns rzuty::MulExpr:
		//    formexpr=Form ('razy' num=Num)?
		//    | '(' formexpr=Form ')' ('razy' num=Num)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//formexpr=Form ('razy' num=Num)?
		//| '(' formexpr=Form ')' ('razy' num=Num)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//formexpr=Form ('razy' num=Num)?
		public Group getGroup_0() { return cGroup_0; }
		
		//formexpr=Form
		public Assignment getFormexprAssignment_0_0() { return cFormexprAssignment_0_0; }
		
		//Form
		public RuleCall getFormexprFormParserRuleCall_0_0_0() { return cFormexprFormParserRuleCall_0_0_0; }
		
		//('razy' num=Num)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'razy'
		public Keyword getRazyKeyword_0_1_0() { return cRazyKeyword_0_1_0; }
		
		//num=Num
		public Assignment getNumAssignment_0_1_1() { return cNumAssignment_0_1_1; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_0_1_1_0() { return cNumNumParserRuleCall_0_1_1_0; }
		
		//'(' formexpr=Form ')' ('razy' num=Num)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//formexpr=Form
		public Assignment getFormexprAssignment_1_1() { return cFormexprAssignment_1_1; }
		
		//Form
		public RuleCall getFormexprFormParserRuleCall_1_1_0() { return cFormexprFormParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//('razy' num=Num)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'razy'
		public Keyword getRazyKeyword_1_3_0() { return cRazyKeyword_1_3_0; }
		
		//num=Num
		public Assignment getNumAssignment_1_3_1() { return cNumAssignment_1_3_1; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_1_3_1_0() { return cNumNumParserRuleCall_1_3_1_0; }
	}
	public class FormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Form");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftDiceParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightNumParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// elementarna forma
		//Form returns rzuty::FormExpr:
		//    left=Dice ( operator=Operator right=Num )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Dice ( operator=Operator right=Num )?
		public Group getGroup() { return cGroup; }
		
		//left=Dice
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Dice
		public RuleCall getLeftDiceParserRuleCall_0_0() { return cLeftDiceParserRuleCall_0_0; }
		
		//( operator=Operator right=Num )?
		public Group getGroup_1() { return cGroup_1; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0_0() { return cOperatorOperatorEnumRuleCall_1_0_0; }
		
		//right=Num
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Num
		public RuleCall getRightNumParserRuleCall_1_1_0() { return cRightNumParserRuleCall_1_1_0; }
	}
	public class SingleDiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SingleDice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cSidesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSidesNumParserRuleCall_1_0 = (RuleCall)cSidesAssignment_1.eContents().get(0);
		
		//// pojedyncza kostka
		//SingleDice returns rzuty::SingleDice:
		//    D sides=Num
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//D sides=Num
		public Group getGroup() { return cGroup; }
		
		//D
		public RuleCall getDTerminalRuleCall_0() { return cDTerminalRuleCall_0; }
		
		//sides=Num
		public Assignment getSidesAssignment_1() { return cSidesAssignment_1; }
		
		//Num
		public RuleCall getSidesNumParserRuleCall_1_0() { return cSidesNumParserRuleCall_1_0; }
	}
	public class MultiDiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MultiDice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCountNumParserRuleCall_0_0 = (RuleCall)cCountAssignment_0.eContents().get(0);
		private final RuleCall cDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cSidesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSidesNumParserRuleCall_2_0 = (RuleCall)cSidesAssignment_2.eContents().get(0);
		
		//// wiele kostek
		//MultiDice returns rzuty::MultiDice:
		//    count=Num D sides=Num
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//count=Num D sides=Num
		public Group getGroup() { return cGroup; }
		
		//count=Num
		public Assignment getCountAssignment_0() { return cCountAssignment_0; }
		
		//Num
		public RuleCall getCountNumParserRuleCall_0_0() { return cCountNumParserRuleCall_0_0; }
		
		//D
		public RuleCall getDTerminalRuleCall_1() { return cDTerminalRuleCall_1; }
		
		//sides=Num
		public Assignment getSidesAssignment_2() { return cSidesAssignment_2; }
		
		//Num
		public RuleCall getSidesNumParserRuleCall_2_0() { return cSidesNumParserRuleCall_2_0; }
	}
	public class DiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Dice");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleDiceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiDiceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// alternatywa dla Dice
		//Dice returns rzuty::Dice:
		//    SingleDice | MultiDice
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleDice | MultiDice
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleDice
		public RuleCall getSingleDiceParserRuleCall_0() { return cSingleDiceParserRuleCall_0; }
		
		//MultiDice
		public RuleCall getMultiDiceParserRuleCall_1() { return cMultiDiceParserRuleCall_1; }
	}
	public class RuleSumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RuleSum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExplosionRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDiceMarkSumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDiceDiscSumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDiceRerollSumParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// ------------- RuleSum i podtypy -------------
		//RuleSum returns rzuty::SumRule:
		//    ExplosionRule
		//  | DiceMarkSum
		//  | DiceDiscSum
		//  | DiceRerollSum
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ExplosionRule
		//| DiceMarkSum
		//| DiceDiscSum
		//| DiceRerollSum
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExplosionRule
		public RuleCall getExplosionRuleParserRuleCall_0() { return cExplosionRuleParserRuleCall_0; }
		
		//DiceMarkSum
		public RuleCall getDiceMarkSumParserRuleCall_1() { return cDiceMarkSumParserRuleCall_1; }
		
		//DiceDiscSum
		public RuleCall getDiceDiscSumParserRuleCall_2() { return cDiceDiscSumParserRuleCall_2; }
		
		//DiceRerollSum
		public RuleCall getDiceRerollSumParserRuleCall_3() { return cDiceRerollSumParserRuleCall_3; }
	}
	public class ExplosionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExplosionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignSignEnumRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Keyword cWybuchoweKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNumAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNumNumParserRuleCall_2_0 = (RuleCall)cNumAssignment_2.eContents().get(0);
		
		//ExplosionRule returns rzuty::ExplosionRule:
		//    sign=Sign 'wybuchowe' num=Num
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//sign=Sign 'wybuchowe' num=Num
		public Group getGroup() { return cGroup; }
		
		//sign=Sign
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }
		
		//Sign
		public RuleCall getSignSignEnumRuleCall_0_0() { return cSignSignEnumRuleCall_0_0; }
		
		//'wybuchowe'
		public Keyword getWybuchoweKeyword_1() { return cWybuchoweKeyword_1; }
		
		//num=Num
		public Assignment getNumAssignment_2() { return cNumAssignment_2; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_2_0() { return cNumNumParserRuleCall_2_0; }
	}
	public class DiceMarkSumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DiceMarkSum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOznaczKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMarkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMarkMarkParserRuleCall_1_0 = (RuleCall)cMarkAssignment_1.eContents().get(0);
		
		//DiceMarkSum returns rzuty::DiceMarkSum:
		//    'oznacz' mark=Mark
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'oznacz' mark=Mark
		public Group getGroup() { return cGroup; }
		
		//'oznacz'
		public Keyword getOznaczKeyword_0() { return cOznaczKeyword_0; }
		
		//mark=Mark
		public Assignment getMarkAssignment_1() { return cMarkAssignment_1; }
		
		//Mark
		public RuleCall getMarkMarkParserRuleCall_1_0() { return cMarkMarkParserRuleCall_1_0; }
	}
	public class DiceDiscSumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DiceDiscSum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOdrzucKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDiscardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDiscardDiscardParserRuleCall_1_0 = (RuleCall)cDiscardAssignment_1.eContents().get(0);
		
		//DiceDiscSum returns rzuty::DiceDiscSum:
		//    'odrzuc' discard=Discard
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'odrzuc' discard=Discard
		public Group getGroup() { return cGroup; }
		
		//'odrzuc'
		public Keyword getOdrzucKeyword_0() { return cOdrzucKeyword_0; }
		
		//discard=Discard
		public Assignment getDiscardAssignment_1() { return cDiscardAssignment_1; }
		
		//Discard
		public RuleCall getDiscardDiscardParserRuleCall_1_0() { return cDiscardDiscardParserRuleCall_1_0; }
	}
	public class DiceRerollSumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DiceRerollSum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrzerzucKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRerollAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRerollRerollParserRuleCall_1_0 = (RuleCall)cRerollAssignment_1.eContents().get(0);
		
		//DiceRerollSum returns rzuty::DiceRerollSum:
		//    'przerzuc' reroll=Reroll
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'przerzuc' reroll=Reroll
		public Group getGroup() { return cGroup; }
		
		//'przerzuc'
		public Keyword getPrzerzucKeyword_0() { return cPrzerzucKeyword_0; }
		
		//reroll=Reroll
		public Assignment getRerollAssignment_1() { return cRerollAssignment_1; }
		
		//Reroll
		public RuleCall getRerollRerollParserRuleCall_1_0() { return cRerollRerollParserRuleCall_1_0; }
	}
	public class RuleSukElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RuleSuk");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSukcesKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cSuccessThresholdParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cSuccessMultiplierParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cSuccessBasicParserRuleCall_0_1_2 = (RuleCall)cAlternatives_0_1.eContents().get(2);
		private final RuleCall cDiceMarkSukParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDiceDiscSukParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDiceRerollSukParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// ------------- RuleSuk i podtypy -------------
		//RuleSuk returns rzuty::SuccessRule:
		//    'sukces' (
		//        SuccessThreshold
		//      | SuccessMultiplier
		//      | SuccessBasic
		//    )
		//  | DiceMarkSuk
		//  | DiceDiscSuk
		//  | DiceRerollSuk
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  'sukces' (
		//      SuccessThreshold
		//    | SuccessMultiplier
		//    | SuccessBasic
		//  )
		//| DiceMarkSuk
		//| DiceDiscSuk
		//| DiceRerollSuk
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'sukces' (
		//    SuccessThreshold
		//  | SuccessMultiplier
		//  | SuccessBasic
		//)
		public Group getGroup_0() { return cGroup_0; }
		
		//'sukces'
		public Keyword getSukcesKeyword_0_0() { return cSukcesKeyword_0_0; }
		
		//(
		//       SuccessThreshold
		//     | SuccessMultiplier
		//     | SuccessBasic
		//   )
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//SuccessThreshold
		public RuleCall getSuccessThresholdParserRuleCall_0_1_0() { return cSuccessThresholdParserRuleCall_0_1_0; }
		
		//SuccessMultiplier
		public RuleCall getSuccessMultiplierParserRuleCall_0_1_1() { return cSuccessMultiplierParserRuleCall_0_1_1; }
		
		//SuccessBasic
		public RuleCall getSuccessBasicParserRuleCall_0_1_2() { return cSuccessBasicParserRuleCall_0_1_2; }
		
		//DiceMarkSuk
		public RuleCall getDiceMarkSukParserRuleCall_1() { return cDiceMarkSukParserRuleCall_1; }
		
		//DiceDiscSuk
		public RuleCall getDiceDiscSukParserRuleCall_2() { return cDiceDiscSukParserRuleCall_2; }
		
		//DiceRerollSuk
		public RuleCall getDiceRerollSukParserRuleCall_3() { return cDiceRerollSukParserRuleCall_3; }
	}
	public class SuccessThresholdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SuccessThreshold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHightlowAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHightlowHighLowEnumRuleCall_0_0 = (RuleCall)cHightlowAssignment_0.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumNumParserRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		
		//SuccessThreshold returns rzuty::SuccessThreshold:
		//    hightlow =HighLow num=Num
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//hightlow =HighLow num=Num
		public Group getGroup() { return cGroup; }
		
		//hightlow =HighLow
		public Assignment getHightlowAssignment_0() { return cHightlowAssignment_0; }
		
		//HighLow
		public RuleCall getHightlowHighLowEnumRuleCall_0_0() { return cHightlowHighLowEnumRuleCall_0_0; }
		
		//num=Num
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_1_0() { return cNumNumParserRuleCall_1_0; }
	}
	public class SuccessMultiplierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SuccessMultiplier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumNumParserRuleCall_0_0 = (RuleCall)cNumAssignment_0.eContents().get(0);
		private final Keyword cRazyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignSignEnumRuleCall_2_0 = (RuleCall)cSignAssignment_2.eContents().get(0);
		private final Assignment cMultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMultNumParserRuleCall_3_0 = (RuleCall)cMultAssignment_3.eContents().get(0);
		
		//SuccessMultiplier returns rzuty::SuccessMultiplier:
		//    num=Num 'razy' sign=Sign? mult=Num
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//num=Num 'razy' sign=Sign? mult=Num
		public Group getGroup() { return cGroup; }
		
		//num=Num
		public Assignment getNumAssignment_0() { return cNumAssignment_0; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_0_0() { return cNumNumParserRuleCall_0_0; }
		
		//'razy'
		public Keyword getRazyKeyword_1() { return cRazyKeyword_1; }
		
		//sign=Sign?
		public Assignment getSignAssignment_2() { return cSignAssignment_2; }
		
		//Sign
		public RuleCall getSignSignEnumRuleCall_2_0() { return cSignSignEnumRuleCall_2_0; }
		
		//mult=Num
		public Assignment getMultAssignment_3() { return cMultAssignment_3; }
		
		//Num
		public RuleCall getMultNumParserRuleCall_3_0() { return cMultNumParserRuleCall_3_0; }
	}
	public class SuccessBasicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SuccessBasic");
		private final Assignment cNumAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumNumParserRuleCall_0 = (RuleCall)cNumAssignment.eContents().get(0);
		
		//SuccessBasic returns rzuty::SuccessBasic:
		//    num=Num
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//num=Num
		public Assignment getNumAssignment() { return cNumAssignment; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_0() { return cNumNumParserRuleCall_0; }
	}
	public class DiceMarkSukElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DiceMarkSuk");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOznaczKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMarkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMarkMarkParserRuleCall_1_0 = (RuleCall)cMarkAssignment_1.eContents().get(0);
		
		//DiceMarkSuk returns rzuty::DiceMarkSuk:
		//    'oznacz' mark=Mark
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'oznacz' mark=Mark
		public Group getGroup() { return cGroup; }
		
		//'oznacz'
		public Keyword getOznaczKeyword_0() { return cOznaczKeyword_0; }
		
		//mark=Mark
		public Assignment getMarkAssignment_1() { return cMarkAssignment_1; }
		
		//Mark
		public RuleCall getMarkMarkParserRuleCall_1_0() { return cMarkMarkParserRuleCall_1_0; }
	}
	public class DiceDiscSukElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DiceDiscSuk");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOdrzucKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDiscardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDiscardDiscardParserRuleCall_1_0 = (RuleCall)cDiscardAssignment_1.eContents().get(0);
		
		//DiceDiscSuk returns rzuty::DiceDiscSuk:
		//    'odrzuc' discard=Discard
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'odrzuc' discard=Discard
		public Group getGroup() { return cGroup; }
		
		//'odrzuc'
		public Keyword getOdrzucKeyword_0() { return cOdrzucKeyword_0; }
		
		//discard=Discard
		public Assignment getDiscardAssignment_1() { return cDiscardAssignment_1; }
		
		//Discard
		public RuleCall getDiscardDiscardParserRuleCall_1_0() { return cDiscardDiscardParserRuleCall_1_0; }
	}
	public class DiceRerollSukElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DiceRerollSuk");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrzerzucKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRerollAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRerollRerollParserRuleCall_1_0 = (RuleCall)cRerollAssignment_1.eContents().get(0);
		
		//DiceRerollSuk returns rzuty::DiceRerollSuk:
		//    'przerzuc' reroll=Reroll
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'przerzuc' reroll=Reroll
		public Group getGroup() { return cGroup; }
		
		//'przerzuc'
		public Keyword getPrzerzucKeyword_0() { return cPrzerzucKeyword_0; }
		
		//reroll=Reroll
		public Assignment getRerollAssignment_1() { return cRerollAssignment_1; }
		
		//Reroll
		public RuleCall getRerollRerollParserRuleCall_1_0() { return cRerollRerollParserRuleCall_1_0; }
	}
	public class MarkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Mark");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMarkThresholdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMarkHighestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMarkPositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMarkValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// ------------- Mark / Discard / Reroll -------------
		//Mark returns rzuty::Mark:
		//    MarkThreshold | MarkHighest | MarkPosition | MarkValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MarkThreshold | MarkHighest | MarkPosition | MarkValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MarkThreshold
		public RuleCall getMarkThresholdParserRuleCall_0() { return cMarkThresholdParserRuleCall_0; }
		
		//MarkHighest
		public RuleCall getMarkHighestParserRuleCall_1() { return cMarkHighestParserRuleCall_1; }
		
		//MarkPosition
		public RuleCall getMarkPositionParserRuleCall_2() { return cMarkPositionParserRuleCall_2; }
		
		//MarkValue
		public RuleCall getMarkValueParserRuleCall_3() { return cMarkValueParserRuleCall_3; }
	}
	public class MarkThresholdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MarkThreshold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHightlowAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHightlowHighLowEnumRuleCall_0_0 = (RuleCall)cHightlowAssignment_0.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumNumParserRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		
		//MarkThreshold returns rzuty::MarkThan:
		//    hightlow =HighLow num=Num
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//hightlow =HighLow num=Num
		public Group getGroup() { return cGroup; }
		
		//hightlow =HighLow
		public Assignment getHightlowAssignment_0() { return cHightlowAssignment_0; }
		
		//HighLow
		public RuleCall getHightlowHighLowEnumRuleCall_0_0() { return cHightlowHighLowEnumRuleCall_0_0; }
		
		//num=Num
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_1_0() { return cNumNumParserRuleCall_1_0; }
	}
	public class MarkHighestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MarkHighest");
		private final Assignment cHightlowAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cHightlowHighLowEnumRuleCall_0 = (RuleCall)cHightlowAssignment.eContents().get(0);
		
		//MarkHighest returns rzuty::MarkHigh:
		//    hightlow = HighLow
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//hightlow = HighLow
		public Assignment getHightlowAssignment() { return cHightlowAssignment; }
		
		//HighLow
		public RuleCall getHightlowHighLowEnumRuleCall_0() { return cHightlowHighLowEnumRuleCall_0; }
	}
	public class MarkPositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MarkPosition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumNumParserRuleCall_0_0 = (RuleCall)cNumAssignment_0.eContents().get(0);
		private final Assignment cFirstlastAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstlastFirstLastEnumRuleCall_1_0 = (RuleCall)cFirstlastAssignment_1.eContents().get(0);
		
		//MarkPosition returns rzuty::MarkKol:
		//    num=Num firstlast=FirstLast
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//num=Num firstlast=FirstLast
		public Group getGroup() { return cGroup; }
		
		//num=Num
		public Assignment getNumAssignment_0() { return cNumAssignment_0; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_0_0() { return cNumNumParserRuleCall_0_0; }
		
		//firstlast=FirstLast
		public Assignment getFirstlastAssignment_1() { return cFirstlastAssignment_1; }
		
		//FirstLast
		public RuleCall getFirstlastFirstLastEnumRuleCall_1_0() { return cFirstlastFirstLastEnumRuleCall_1_0; }
	}
	public class MarkValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MarkValue");
		private final Assignment cNumAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumNumParserRuleCall_0 = (RuleCall)cNumAssignment.eContents().get(0);
		
		//MarkValue returns rzuty::MarkNum:
		//    num=Num
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//num=Num
		public Assignment getNumAssignment() { return cNumAssignment; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_0() { return cNumNumParserRuleCall_0; }
	}
	public class DiscardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Discard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDiscardThresholdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDiscardHighestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDiscardPositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDiscardValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Discard returns rzuty::Discard:
		//    DiscardThreshold | DiscardHighest | DiscardPosition | DiscardValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DiscardThreshold | DiscardHighest | DiscardPosition | DiscardValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DiscardThreshold
		public RuleCall getDiscardThresholdParserRuleCall_0() { return cDiscardThresholdParserRuleCall_0; }
		
		//DiscardHighest
		public RuleCall getDiscardHighestParserRuleCall_1() { return cDiscardHighestParserRuleCall_1; }
		
		//DiscardPosition
		public RuleCall getDiscardPositionParserRuleCall_2() { return cDiscardPositionParserRuleCall_2; }
		
		//DiscardValue
		public RuleCall getDiscardValueParserRuleCall_3() { return cDiscardValueParserRuleCall_3; }
	}
	public class DiscardThresholdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DiscardThreshold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHightlowAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHightlowHighLowEnumRuleCall_0_0 = (RuleCall)cHightlowAssignment_0.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumNumParserRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		
		//DiscardThreshold returns rzuty::DiscardThan:
		//    hightlow =HighLow num=Num
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//hightlow =HighLow num=Num
		public Group getGroup() { return cGroup; }
		
		//hightlow =HighLow
		public Assignment getHightlowAssignment_0() { return cHightlowAssignment_0; }
		
		//HighLow
		public RuleCall getHightlowHighLowEnumRuleCall_0_0() { return cHightlowHighLowEnumRuleCall_0_0; }
		
		//num=Num
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_1_0() { return cNumNumParserRuleCall_1_0; }
	}
	public class DiscardHighestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DiscardHighest");
		private final Assignment cHightlowAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cHightlowHighLowEnumRuleCall_0 = (RuleCall)cHightlowAssignment.eContents().get(0);
		
		//DiscardHighest returns rzuty::DiscardHigh:
		//    hightlow = HighLow
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//hightlow = HighLow
		public Assignment getHightlowAssignment() { return cHightlowAssignment; }
		
		//HighLow
		public RuleCall getHightlowHighLowEnumRuleCall_0() { return cHightlowHighLowEnumRuleCall_0; }
	}
	public class DiscardPositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DiscardPosition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumNumParserRuleCall_0_0 = (RuleCall)cNumAssignment_0.eContents().get(0);
		private final Assignment cFirstlastAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstlastFirstLastEnumRuleCall_1_0 = (RuleCall)cFirstlastAssignment_1.eContents().get(0);
		
		//DiscardPosition returns rzuty::DiscardKol:
		//    num=Num firstlast=FirstLast
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//num=Num firstlast=FirstLast
		public Group getGroup() { return cGroup; }
		
		//num=Num
		public Assignment getNumAssignment_0() { return cNumAssignment_0; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_0_0() { return cNumNumParserRuleCall_0_0; }
		
		//firstlast=FirstLast
		public Assignment getFirstlastAssignment_1() { return cFirstlastAssignment_1; }
		
		//FirstLast
		public RuleCall getFirstlastFirstLastEnumRuleCall_1_0() { return cFirstlastFirstLastEnumRuleCall_1_0; }
	}
	public class DiscardValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DiscardValue");
		private final Assignment cNumAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumNumParserRuleCall_0 = (RuleCall)cNumAssignment.eContents().get(0);
		
		//DiscardValue returns rzuty::DiscardNum:
		//    num=Num
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//num=Num
		public Assignment getNumAssignment() { return cNumAssignment; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_0() { return cNumNumParserRuleCall_0; }
	}
	public class RerollElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Reroll");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRerollThresholdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRerollHighestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRerollPositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRerollValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Reroll returns rzuty::Reroll:
		//    RerollThreshold | RerollHighest | RerollPosition | RerollValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RerollThreshold | RerollHighest | RerollPosition | RerollValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RerollThreshold
		public RuleCall getRerollThresholdParserRuleCall_0() { return cRerollThresholdParserRuleCall_0; }
		
		//RerollHighest
		public RuleCall getRerollHighestParserRuleCall_1() { return cRerollHighestParserRuleCall_1; }
		
		//RerollPosition
		public RuleCall getRerollPositionParserRuleCall_2() { return cRerollPositionParserRuleCall_2; }
		
		//RerollValue
		public RuleCall getRerollValueParserRuleCall_3() { return cRerollValueParserRuleCall_3; }
	}
	public class RerollThresholdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RerollThreshold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHightlowAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHightlowHighLowEnumRuleCall_0_0 = (RuleCall)cHightlowAssignment_0.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumNumParserRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		
		//RerollThreshold returns rzuty::RerollThan:
		//    hightlow=HighLow num=Num
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//hightlow=HighLow num=Num
		public Group getGroup() { return cGroup; }
		
		//hightlow=HighLow
		public Assignment getHightlowAssignment_0() { return cHightlowAssignment_0; }
		
		//HighLow
		public RuleCall getHightlowHighLowEnumRuleCall_0_0() { return cHightlowHighLowEnumRuleCall_0_0; }
		
		//num=Num
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_1_0() { return cNumNumParserRuleCall_1_0; }
	}
	public class RerollHighestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RerollHighest");
		private final Assignment cHightlowAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cHightlowHighLowEnumRuleCall_0 = (RuleCall)cHightlowAssignment.eContents().get(0);
		
		//RerollHighest returns rzuty::RerollHigh:
		//    hightlow = HighLow
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//hightlow = HighLow
		public Assignment getHightlowAssignment() { return cHightlowAssignment; }
		
		//HighLow
		public RuleCall getHightlowHighLowEnumRuleCall_0() { return cHightlowHighLowEnumRuleCall_0; }
	}
	public class RerollPositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RerollPosition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumNumParserRuleCall_0_0 = (RuleCall)cNumAssignment_0.eContents().get(0);
		private final Assignment cFirstlastAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstlastFirstLastEnumRuleCall_1_0 = (RuleCall)cFirstlastAssignment_1.eContents().get(0);
		
		//RerollPosition returns rzuty::RerollKol:
		//    num=Num firstlast=FirstLast
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//num=Num firstlast=FirstLast
		public Group getGroup() { return cGroup; }
		
		//num=Num
		public Assignment getNumAssignment_0() { return cNumAssignment_0; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_0_0() { return cNumNumParserRuleCall_0_0; }
		
		//firstlast=FirstLast
		public Assignment getFirstlastAssignment_1() { return cFirstlastAssignment_1; }
		
		//FirstLast
		public RuleCall getFirstlastFirstLastEnumRuleCall_1_0() { return cFirstlastFirstLastEnumRuleCall_1_0; }
	}
	public class RerollValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RerollValue");
		private final Assignment cNumAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumNumParserRuleCall_0 = (RuleCall)cNumAssignment.eContents().get(0);
		
		//RerollValue returns rzuty::RerollNum:
		//    num=Num
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//num=Num
		public Assignment getNumAssignment() { return cNumAssignment; }
		
		//Num
		public RuleCall getNumNumParserRuleCall_0() { return cNumNumParserRuleCall_0; }
	}
	public class NumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Num");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//// ------------- Typy bazowe -------------
		//Num returns rzuty::Num:
		//   value=EInt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EInt
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0() { return cValueEIntParserRuleCall_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	public class SignElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Sign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cADDDodawajKeyword_1_0 = (Keyword)cADDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSUBOdejmujKeyword_2_0 = (Keyword)cSUBEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSUBHyphenMinusSpaceKeyword_3_0 = (Keyword)cSUBEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Sign returns rzuty::Sign:
		//    ADD = '+'
		//  | ADD = 'dodawaj'
		//  | SUB = 'odejmuj'
		//  | SUB = '- '
		//;
		public EnumRule getRule() { return rule; }
		
		//  ADD = '+'
		//| ADD = 'dodawaj'
		//| SUB = 'odejmuj'
		//| SUB = '- '
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD = '+'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//ADD = 'dodawaj'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_1() { return cADDEnumLiteralDeclaration_1; }
		
		//'dodawaj'
		public Keyword getADDDodawajKeyword_1_0() { return cADDDodawajKeyword_1_0; }
		
		//SUB = 'odejmuj'
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_2() { return cSUBEnumLiteralDeclaration_2; }
		
		//'odejmuj'
		public Keyword getSUBOdejmujKeyword_2_0() { return cSUBOdejmujKeyword_2_0; }
		
		//SUB = '- '
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_3() { return cSUBEnumLiteralDeclaration_3; }
		
		//'- '
		public Keyword getSUBHyphenMinusSpaceKeyword_3_0() { return cSUBHyphenMinusSpaceKeyword_3_0; }
	}
	public class FirstLastElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FirstLast");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFIRSTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFIRSTPierwszeKeyword_0_0 = (Keyword)cFIRSTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLASTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLASTOstatnieKeyword_1_0 = (Keyword)cLASTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum FirstLast returns rzuty::FirstLast:
		//    FIRST = 'pierwsze'
		//  | LAST  = 'ostatnie'
		//;
		public EnumRule getRule() { return rule; }
		
		//  FIRST = 'pierwsze'
		//| LAST  = 'ostatnie'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FIRST = 'pierwsze'
		public EnumLiteralDeclaration getFIRSTEnumLiteralDeclaration_0() { return cFIRSTEnumLiteralDeclaration_0; }
		
		//'pierwsze'
		public Keyword getFIRSTPierwszeKeyword_0_0() { return cFIRSTPierwszeKeyword_0_0; }
		
		//LAST  = 'ostatnie'
		public EnumLiteralDeclaration getLASTEnumLiteralDeclaration_1() { return cLASTEnumLiteralDeclaration_1; }
		
		//'ostatnie'
		public Keyword getLASTOstatnieKeyword_1_0() { return cLASTOstatnieKeyword_1_0; }
	}
	public class OperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBHyphenMinusSpaceKeyword_1_0 = (Keyword)cSUBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULAsteriskKeyword_2_0 = (Keyword)cMULEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIVSolidusKeyword_3_0 = (Keyword)cDIVEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Operator returns rzuty::Operator:
		//    ADD = '+'
		//  | SUB = '- '
		//  | MUL = '*'
		//  | DIV = '/'
		//;
		public EnumRule getRule() { return rule; }
		
		//  ADD = '+'
		//| SUB = '- '
		//| MUL = '*'
		//| DIV = '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD = '+'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUB = '- '
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_1() { return cSUBEnumLiteralDeclaration_1; }
		
		//'- '
		public Keyword getSUBHyphenMinusSpaceKeyword_1_0() { return cSUBHyphenMinusSpaceKeyword_1_0; }
		
		//MUL = '*'
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_2() { return cMULEnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getMULAsteriskKeyword_2_0() { return cMULAsteriskKeyword_2_0; }
		
		//DIV = '/'
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_3() { return cDIVEnumLiteralDeclaration_3; }
		
		//'/'
		public Keyword getDIVSolidusKeyword_3_0() { return cDIVSolidusKeyword_3_0; }
	}
	public class HighLowElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HighLow");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHIGHNajwyzszeKeyword_0_0 = (Keyword)cHIGHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOWNajnizszeKeyword_1_0 = (Keyword)cLOWEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHIGHWiecejNizKeyword_2_0 = (Keyword)cHIGHEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLOWMniejNizKeyword_3_0 = (Keyword)cLOWEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum HighLow returns rzuty::HighLow:
		//    HIGH = 'najwyzsze'
		//  | LOW  = 'najnizsze'
		//  | HIGH = 'wiecej niz'
		//  | LOW  = 'mniej niz'
		//;
		public EnumRule getRule() { return rule; }
		
		//  HIGH = 'najwyzsze'
		//| LOW  = 'najnizsze'
		//| HIGH = 'wiecej niz'
		//| LOW  = 'mniej niz'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HIGH = 'najwyzsze'
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_0() { return cHIGHEnumLiteralDeclaration_0; }
		
		//'najwyzsze'
		public Keyword getHIGHNajwyzszeKeyword_0_0() { return cHIGHNajwyzszeKeyword_0_0; }
		
		//LOW  = 'najnizsze'
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_1() { return cLOWEnumLiteralDeclaration_1; }
		
		//'najnizsze'
		public Keyword getLOWNajnizszeKeyword_1_0() { return cLOWNajnizszeKeyword_1_0; }
		
		//HIGH = 'wiecej niz'
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_2() { return cHIGHEnumLiteralDeclaration_2; }
		
		//'wiecej niz'
		public Keyword getHIGHWiecejNizKeyword_2_0() { return cHIGHWiecejNizKeyword_2_0; }
		
		//LOW  = 'mniej niz'
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_3() { return cLOWEnumLiteralDeclaration_3; }
		
		//'mniej niz'
		public Keyword getLOWMniejNizKeyword_3_0() { return cLOWMniejNizKeyword_3_0; }
	}
	
	private final LanguageElements pLanguage;
	private final StatElements pStat;
	private final TerminalRule tD;
	private final TerminalRule tID;
	private final SumujElements pSumuj;
	private final SukcesyElements pSukcesy;
	private final DiceExprSumElements pDiceExprSum;
	private final DiceExprSukElements pDiceExprSuk;
	private final MulExprElements pMulExpr;
	private final FormElements pForm;
	private final SingleDiceElements pSingleDice;
	private final MultiDiceElements pMultiDice;
	private final DiceElements pDice;
	private final RuleSumElements pRuleSum;
	private final ExplosionRuleElements pExplosionRule;
	private final DiceMarkSumElements pDiceMarkSum;
	private final DiceDiscSumElements pDiceDiscSum;
	private final DiceRerollSumElements pDiceRerollSum;
	private final RuleSukElements pRuleSuk;
	private final SuccessThresholdElements pSuccessThreshold;
	private final SuccessMultiplierElements pSuccessMultiplier;
	private final SuccessBasicElements pSuccessBasic;
	private final DiceMarkSukElements pDiceMarkSuk;
	private final DiceDiscSukElements pDiceDiscSuk;
	private final DiceRerollSukElements pDiceRerollSuk;
	private final MarkElements pMark;
	private final MarkThresholdElements pMarkThreshold;
	private final MarkHighestElements pMarkHighest;
	private final MarkPositionElements pMarkPosition;
	private final MarkValueElements pMarkValue;
	private final DiscardElements pDiscard;
	private final DiscardThresholdElements pDiscardThreshold;
	private final DiscardHighestElements pDiscardHighest;
	private final DiscardPositionElements pDiscardPosition;
	private final DiscardValueElements pDiscardValue;
	private final RerollElements pReroll;
	private final RerollThresholdElements pRerollThreshold;
	private final RerollHighestElements pRerollHighest;
	private final RerollPositionElements pRerollPosition;
	private final RerollValueElements pRerollValue;
	private final NumElements pNum;
	private final SignElements eSign;
	private final FirstLastElements eFirstLast;
	private final OperatorElements eOperator;
	private final HighLowElements eHighLow;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLanguage = new LanguageElements();
		this.pStat = new StatElements();
		this.tD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.D");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ID");
		this.pSumuj = new SumujElements();
		this.pSukcesy = new SukcesyElements();
		this.pDiceExprSum = new DiceExprSumElements();
		this.pDiceExprSuk = new DiceExprSukElements();
		this.pMulExpr = new MulExprElements();
		this.pForm = new FormElements();
		this.pSingleDice = new SingleDiceElements();
		this.pMultiDice = new MultiDiceElements();
		this.pDice = new DiceElements();
		this.pRuleSum = new RuleSumElements();
		this.pExplosionRule = new ExplosionRuleElements();
		this.pDiceMarkSum = new DiceMarkSumElements();
		this.pDiceDiscSum = new DiceDiscSumElements();
		this.pDiceRerollSum = new DiceRerollSumElements();
		this.pRuleSuk = new RuleSukElements();
		this.pSuccessThreshold = new SuccessThresholdElements();
		this.pSuccessMultiplier = new SuccessMultiplierElements();
		this.pSuccessBasic = new SuccessBasicElements();
		this.pDiceMarkSuk = new DiceMarkSukElements();
		this.pDiceDiscSuk = new DiceDiscSukElements();
		this.pDiceRerollSuk = new DiceRerollSukElements();
		this.pMark = new MarkElements();
		this.pMarkThreshold = new MarkThresholdElements();
		this.pMarkHighest = new MarkHighestElements();
		this.pMarkPosition = new MarkPositionElements();
		this.pMarkValue = new MarkValueElements();
		this.pDiscard = new DiscardElements();
		this.pDiscardThreshold = new DiscardThresholdElements();
		this.pDiscardHighest = new DiscardHighestElements();
		this.pDiscardPosition = new DiscardPositionElements();
		this.pDiscardValue = new DiscardValueElements();
		this.pReroll = new RerollElements();
		this.pRerollThreshold = new RerollThresholdElements();
		this.pRerollHighest = new RerollHighestElements();
		this.pRerollPosition = new RerollPositionElements();
		this.pRerollValue = new RerollValueElements();
		this.pNum = new NumElements();
		this.eSign = new SignElements();
		this.eFirstLast = new FirstLastElements();
		this.eOperator = new OperatorElements();
		this.eHighLow = new HighLowElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Language returns rzuty::Language:
	//    statement=Stat
	//;
	public LanguageElements getLanguageAccess() {
		return pLanguage;
	}
	
	public ParserRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}
	
	//Stat returns rzuty::Stat:
	//    (Sumuj | Sukcesy)
	//;
	public StatElements getStatAccess() {
		return pStat;
	}
	
	public ParserRule getStatRule() {
		return getStatAccess().getRule();
	}
	
	//terminal D: 'd';
	public TerminalRule getDRule() {
		return tD;
	}
	
	//@Override
	//terminal ID:
	//    '^'? ('a'..'z' | 'A'..'Z' | '_')
	//         ('a'..'z' | 'A'..'Z' | '_' )*
	//;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//// SUMUJ ...
	//Sumuj returns rzuty::SumStatement:
	//    'Sumuj' ('\n')?
	//    diceexprsum+=DiceExprSum ( ';' diceexprsum+=DiceExprSum )* ('\n')?
	//    ('.' | ',')?
	//;
	public SumujElements getSumujAccess() {
		return pSumuj;
	}
	
	public ParserRule getSumujRule() {
		return getSumujAccess().getRule();
	}
	
	//// SUKCESY ...
	//Sukcesy returns rzuty::SuccessStatement:
	//    'Sukcesy' ('\n')?
	//    diceexprsuk+=DiceExprSuk ( ';' diceexprsuk+=DiceExprSuk )* ('\n')?
	//    ('.' | ',')?
	//;
	public SukcesyElements getSukcesyAccess() {
		return pSukcesy;
	}
	
	public ParserRule getSukcesyRule() {
		return getSukcesyAccess().getRule();
	}
	
	//// suma rzut√≥w
	//DiceExprSum returns rzuty::DiceExprSum:
	//    (sign=Sign)? mulexpr=MulExpr
	//    (':' sumrule+=RuleSum (',' sumrule+=RuleSum)*)?
	//;
	public DiceExprSumElements getDiceExprSumAccess() {
		return pDiceExprSum;
	}
	
	public ParserRule getDiceExprSumRule() {
		return getDiceExprSumAccess().getRule();
	}
	
	//// sukcesy rzut√≥w
	//DiceExprSuk returns rzuty::DiceExprSuk:
	//    (sign=Sign)? mulexpr=MulExpr
	//    (':' successrule+=RuleSuk (',' successrule+=RuleSuk)*)?
	//;
	public DiceExprSukElements getDiceExprSukAccess() {
		return pDiceExprSuk;
	}
	
	public ParserRule getDiceExprSukRule() {
		return getDiceExprSukAccess().getRule();
	}
	
	//// mno≈ºenie (razy)
	//MulExpr returns rzuty::MulExpr:
	//    formexpr=Form ('razy' num=Num)?
	//    | '(' formexpr=Form ')' ('razy' num=Num)?
	//;
	public MulExprElements getMulExprAccess() {
		return pMulExpr;
	}
	
	public ParserRule getMulExprRule() {
		return getMulExprAccess().getRule();
	}
	
	//// elementarna forma
	//Form returns rzuty::FormExpr:
	//    left=Dice ( operator=Operator right=Num )?
	//;
	public FormElements getFormAccess() {
		return pForm;
	}
	
	public ParserRule getFormRule() {
		return getFormAccess().getRule();
	}
	
	//// pojedyncza kostka
	//SingleDice returns rzuty::SingleDice:
	//    D sides=Num
	//;
	public SingleDiceElements getSingleDiceAccess() {
		return pSingleDice;
	}
	
	public ParserRule getSingleDiceRule() {
		return getSingleDiceAccess().getRule();
	}
	
	//// wiele kostek
	//MultiDice returns rzuty::MultiDice:
	//    count=Num D sides=Num
	//;
	public MultiDiceElements getMultiDiceAccess() {
		return pMultiDice;
	}
	
	public ParserRule getMultiDiceRule() {
		return getMultiDiceAccess().getRule();
	}
	
	//// alternatywa dla Dice
	//Dice returns rzuty::Dice:
	//    SingleDice | MultiDice
	//;
	public DiceElements getDiceAccess() {
		return pDice;
	}
	
	public ParserRule getDiceRule() {
		return getDiceAccess().getRule();
	}
	
	//// ------------- RuleSum i podtypy -------------
	//RuleSum returns rzuty::SumRule:
	//    ExplosionRule
	//  | DiceMarkSum
	//  | DiceDiscSum
	//  | DiceRerollSum
	//;
	public RuleSumElements getRuleSumAccess() {
		return pRuleSum;
	}
	
	public ParserRule getRuleSumRule() {
		return getRuleSumAccess().getRule();
	}
	
	//ExplosionRule returns rzuty::ExplosionRule:
	//    sign=Sign 'wybuchowe' num=Num
	//;
	public ExplosionRuleElements getExplosionRuleAccess() {
		return pExplosionRule;
	}
	
	public ParserRule getExplosionRuleRule() {
		return getExplosionRuleAccess().getRule();
	}
	
	//DiceMarkSum returns rzuty::DiceMarkSum:
	//    'oznacz' mark=Mark
	//;
	public DiceMarkSumElements getDiceMarkSumAccess() {
		return pDiceMarkSum;
	}
	
	public ParserRule getDiceMarkSumRule() {
		return getDiceMarkSumAccess().getRule();
	}
	
	//DiceDiscSum returns rzuty::DiceDiscSum:
	//    'odrzuc' discard=Discard
	//;
	public DiceDiscSumElements getDiceDiscSumAccess() {
		return pDiceDiscSum;
	}
	
	public ParserRule getDiceDiscSumRule() {
		return getDiceDiscSumAccess().getRule();
	}
	
	//DiceRerollSum returns rzuty::DiceRerollSum:
	//    'przerzuc' reroll=Reroll
	//;
	public DiceRerollSumElements getDiceRerollSumAccess() {
		return pDiceRerollSum;
	}
	
	public ParserRule getDiceRerollSumRule() {
		return getDiceRerollSumAccess().getRule();
	}
	
	//// ------------- RuleSuk i podtypy -------------
	//RuleSuk returns rzuty::SuccessRule:
	//    'sukces' (
	//        SuccessThreshold
	//      | SuccessMultiplier
	//      | SuccessBasic
	//    )
	//  | DiceMarkSuk
	//  | DiceDiscSuk
	//  | DiceRerollSuk
	//;
	public RuleSukElements getRuleSukAccess() {
		return pRuleSuk;
	}
	
	public ParserRule getRuleSukRule() {
		return getRuleSukAccess().getRule();
	}
	
	//SuccessThreshold returns rzuty::SuccessThreshold:
	//    hightlow =HighLow num=Num
	//;
	public SuccessThresholdElements getSuccessThresholdAccess() {
		return pSuccessThreshold;
	}
	
	public ParserRule getSuccessThresholdRule() {
		return getSuccessThresholdAccess().getRule();
	}
	
	//SuccessMultiplier returns rzuty::SuccessMultiplier:
	//    num=Num 'razy' sign=Sign? mult=Num
	//;
	public SuccessMultiplierElements getSuccessMultiplierAccess() {
		return pSuccessMultiplier;
	}
	
	public ParserRule getSuccessMultiplierRule() {
		return getSuccessMultiplierAccess().getRule();
	}
	
	//SuccessBasic returns rzuty::SuccessBasic:
	//    num=Num
	//;
	public SuccessBasicElements getSuccessBasicAccess() {
		return pSuccessBasic;
	}
	
	public ParserRule getSuccessBasicRule() {
		return getSuccessBasicAccess().getRule();
	}
	
	//DiceMarkSuk returns rzuty::DiceMarkSuk:
	//    'oznacz' mark=Mark
	//;
	public DiceMarkSukElements getDiceMarkSukAccess() {
		return pDiceMarkSuk;
	}
	
	public ParserRule getDiceMarkSukRule() {
		return getDiceMarkSukAccess().getRule();
	}
	
	//DiceDiscSuk returns rzuty::DiceDiscSuk:
	//    'odrzuc' discard=Discard
	//;
	public DiceDiscSukElements getDiceDiscSukAccess() {
		return pDiceDiscSuk;
	}
	
	public ParserRule getDiceDiscSukRule() {
		return getDiceDiscSukAccess().getRule();
	}
	
	//DiceRerollSuk returns rzuty::DiceRerollSuk:
	//    'przerzuc' reroll=Reroll
	//;
	public DiceRerollSukElements getDiceRerollSukAccess() {
		return pDiceRerollSuk;
	}
	
	public ParserRule getDiceRerollSukRule() {
		return getDiceRerollSukAccess().getRule();
	}
	
	//// ------------- Mark / Discard / Reroll -------------
	//Mark returns rzuty::Mark:
	//    MarkThreshold | MarkHighest | MarkPosition | MarkValue
	//;
	public MarkElements getMarkAccess() {
		return pMark;
	}
	
	public ParserRule getMarkRule() {
		return getMarkAccess().getRule();
	}
	
	//MarkThreshold returns rzuty::MarkThan:
	//    hightlow =HighLow num=Num
	//;
	public MarkThresholdElements getMarkThresholdAccess() {
		return pMarkThreshold;
	}
	
	public ParserRule getMarkThresholdRule() {
		return getMarkThresholdAccess().getRule();
	}
	
	//MarkHighest returns rzuty::MarkHigh:
	//    hightlow = HighLow
	//;
	public MarkHighestElements getMarkHighestAccess() {
		return pMarkHighest;
	}
	
	public ParserRule getMarkHighestRule() {
		return getMarkHighestAccess().getRule();
	}
	
	//MarkPosition returns rzuty::MarkKol:
	//    num=Num firstlast=FirstLast
	//;
	public MarkPositionElements getMarkPositionAccess() {
		return pMarkPosition;
	}
	
	public ParserRule getMarkPositionRule() {
		return getMarkPositionAccess().getRule();
	}
	
	//MarkValue returns rzuty::MarkNum:
	//    num=Num
	//;
	public MarkValueElements getMarkValueAccess() {
		return pMarkValue;
	}
	
	public ParserRule getMarkValueRule() {
		return getMarkValueAccess().getRule();
	}
	
	//Discard returns rzuty::Discard:
	//    DiscardThreshold | DiscardHighest | DiscardPosition | DiscardValue
	//;
	public DiscardElements getDiscardAccess() {
		return pDiscard;
	}
	
	public ParserRule getDiscardRule() {
		return getDiscardAccess().getRule();
	}
	
	//DiscardThreshold returns rzuty::DiscardThan:
	//    hightlow =HighLow num=Num
	//;
	public DiscardThresholdElements getDiscardThresholdAccess() {
		return pDiscardThreshold;
	}
	
	public ParserRule getDiscardThresholdRule() {
		return getDiscardThresholdAccess().getRule();
	}
	
	//DiscardHighest returns rzuty::DiscardHigh:
	//    hightlow = HighLow
	//;
	public DiscardHighestElements getDiscardHighestAccess() {
		return pDiscardHighest;
	}
	
	public ParserRule getDiscardHighestRule() {
		return getDiscardHighestAccess().getRule();
	}
	
	//DiscardPosition returns rzuty::DiscardKol:
	//    num=Num firstlast=FirstLast
	//;
	public DiscardPositionElements getDiscardPositionAccess() {
		return pDiscardPosition;
	}
	
	public ParserRule getDiscardPositionRule() {
		return getDiscardPositionAccess().getRule();
	}
	
	//DiscardValue returns rzuty::DiscardNum:
	//    num=Num
	//;
	public DiscardValueElements getDiscardValueAccess() {
		return pDiscardValue;
	}
	
	public ParserRule getDiscardValueRule() {
		return getDiscardValueAccess().getRule();
	}
	
	//Reroll returns rzuty::Reroll:
	//    RerollThreshold | RerollHighest | RerollPosition | RerollValue
	//;
	public RerollElements getRerollAccess() {
		return pReroll;
	}
	
	public ParserRule getRerollRule() {
		return getRerollAccess().getRule();
	}
	
	//RerollThreshold returns rzuty::RerollThan:
	//    hightlow=HighLow num=Num
	//;
	public RerollThresholdElements getRerollThresholdAccess() {
		return pRerollThreshold;
	}
	
	public ParserRule getRerollThresholdRule() {
		return getRerollThresholdAccess().getRule();
	}
	
	//RerollHighest returns rzuty::RerollHigh:
	//    hightlow = HighLow
	//;
	public RerollHighestElements getRerollHighestAccess() {
		return pRerollHighest;
	}
	
	public ParserRule getRerollHighestRule() {
		return getRerollHighestAccess().getRule();
	}
	
	//RerollPosition returns rzuty::RerollKol:
	//    num=Num firstlast=FirstLast
	//;
	public RerollPositionElements getRerollPositionAccess() {
		return pRerollPosition;
	}
	
	public ParserRule getRerollPositionRule() {
		return getRerollPositionAccess().getRule();
	}
	
	//RerollValue returns rzuty::RerollNum:
	//    num=Num
	//;
	public RerollValueElements getRerollValueAccess() {
		return pRerollValue;
	}
	
	public ParserRule getRerollValueRule() {
		return getRerollValueAccess().getRule();
	}
	
	//// ------------- Typy bazowe -------------
	//Num returns rzuty::Num:
	//   value=EInt
	//;
	public NumElements getNumAccess() {
		return pNum;
	}
	
	public ParserRule getNumRule() {
		return getNumAccess().getRule();
	}
	
	//enum Sign returns rzuty::Sign:
	//    ADD = '+'
	//  | ADD = 'dodawaj'
	//  | SUB = 'odejmuj'
	//  | SUB = '- '
	//;
	public SignElements getSignAccess() {
		return eSign;
	}
	
	public EnumRule getSignRule() {
		return getSignAccess().getRule();
	}
	
	//enum FirstLast returns rzuty::FirstLast:
	//    FIRST = 'pierwsze'
	//  | LAST  = 'ostatnie'
	//;
	public FirstLastElements getFirstLastAccess() {
		return eFirstLast;
	}
	
	public EnumRule getFirstLastRule() {
		return getFirstLastAccess().getRule();
	}
	
	//enum Operator returns rzuty::Operator:
	//    ADD = '+'
	//  | SUB = '- '
	//  | MUL = '*'
	//  | DIV = '/'
	//;
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//enum HighLow returns rzuty::HighLow:
	//    HIGH = 'najwyzsze'
	//  | LOW  = 'najnizsze'
	//  | HIGH = 'wiecej niz'
	//  | LOW  = 'mniej niz'
	//;
	public HighLowElements getHighLowAccess() {
		return eHighLow;
	}
	
	public EnumRule getHighLowRule() {
		return getHighLowAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT
	//;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING
	//;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
