/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatAccess().getAlternatives(), "rule__Stat__Alternatives");
			builder.put(grammarAccess.getSumujAccess().getAlternatives_5(), "rule__Sumuj__Alternatives_5");
			builder.put(grammarAccess.getSukcesyAccess().getAlternatives_5(), "rule__Sukcesy__Alternatives_5");
			builder.put(grammarAccess.getMulExprAccess().getAlternatives(), "rule__MulExpr__Alternatives");
			builder.put(grammarAccess.getDiceAccess().getAlternatives(), "rule__Dice__Alternatives");
			builder.put(grammarAccess.getRuleSumAccess().getAlternatives(), "rule__RuleSum__Alternatives");
			builder.put(grammarAccess.getRuleSukAccess().getAlternatives(), "rule__RuleSuk__Alternatives");
			builder.put(grammarAccess.getRuleSukAccess().getAlternatives_0_1(), "rule__RuleSuk__Alternatives_0_1");
			builder.put(grammarAccess.getMarkAccess().getAlternatives(), "rule__Mark__Alternatives");
			builder.put(grammarAccess.getDiscardAccess().getAlternatives(), "rule__Discard__Alternatives");
			builder.put(grammarAccess.getRerollAccess().getAlternatives(), "rule__Reroll__Alternatives");
			builder.put(grammarAccess.getSignAccess().getAlternatives(), "rule__Sign__Alternatives");
			builder.put(grammarAccess.getFirstLastAccess().getAlternatives(), "rule__FirstLast__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getHighLowAccess().getAlternatives(), "rule__HighLow__Alternatives");
			builder.put(grammarAccess.getSumujAccess().getGroup(), "rule__Sumuj__Group__0");
			builder.put(grammarAccess.getSumujAccess().getGroup_3(), "rule__Sumuj__Group_3__0");
			builder.put(grammarAccess.getSukcesyAccess().getGroup(), "rule__Sukcesy__Group__0");
			builder.put(grammarAccess.getSukcesyAccess().getGroup_3(), "rule__Sukcesy__Group_3__0");
			builder.put(grammarAccess.getDiceExprSumAccess().getGroup(), "rule__DiceExprSum__Group__0");
			builder.put(grammarAccess.getDiceExprSumAccess().getGroup_2(), "rule__DiceExprSum__Group_2__0");
			builder.put(grammarAccess.getDiceExprSumAccess().getGroup_2_2(), "rule__DiceExprSum__Group_2_2__0");
			builder.put(grammarAccess.getDiceExprSukAccess().getGroup(), "rule__DiceExprSuk__Group__0");
			builder.put(grammarAccess.getDiceExprSukAccess().getGroup_2(), "rule__DiceExprSuk__Group_2__0");
			builder.put(grammarAccess.getDiceExprSukAccess().getGroup_2_2(), "rule__DiceExprSuk__Group_2_2__0");
			builder.put(grammarAccess.getMulExprAccess().getGroup_0(), "rule__MulExpr__Group_0__0");
			builder.put(grammarAccess.getMulExprAccess().getGroup_0_1(), "rule__MulExpr__Group_0_1__0");
			builder.put(grammarAccess.getMulExprAccess().getGroup_1(), "rule__MulExpr__Group_1__0");
			builder.put(grammarAccess.getMulExprAccess().getGroup_1_3(), "rule__MulExpr__Group_1_3__0");
			builder.put(grammarAccess.getFormAccess().getGroup(), "rule__Form__Group__0");
			builder.put(grammarAccess.getFormAccess().getGroup_1(), "rule__Form__Group_1__0");
			builder.put(grammarAccess.getSingleDiceAccess().getGroup(), "rule__SingleDice__Group__0");
			builder.put(grammarAccess.getMultiDiceAccess().getGroup(), "rule__MultiDice__Group__0");
			builder.put(grammarAccess.getExplosionRuleAccess().getGroup(), "rule__ExplosionRule__Group__0");
			builder.put(grammarAccess.getDiceMarkSumAccess().getGroup(), "rule__DiceMarkSum__Group__0");
			builder.put(grammarAccess.getDiceDiscSumAccess().getGroup(), "rule__DiceDiscSum__Group__0");
			builder.put(grammarAccess.getDiceRerollSumAccess().getGroup(), "rule__DiceRerollSum__Group__0");
			builder.put(grammarAccess.getRuleSukAccess().getGroup_0(), "rule__RuleSuk__Group_0__0");
			builder.put(grammarAccess.getSuccessThresholdAccess().getGroup(), "rule__SuccessThreshold__Group__0");
			builder.put(grammarAccess.getSuccessMultiplierAccess().getGroup(), "rule__SuccessMultiplier__Group__0");
			builder.put(grammarAccess.getDiceMarkSukAccess().getGroup(), "rule__DiceMarkSuk__Group__0");
			builder.put(grammarAccess.getDiceDiscSukAccess().getGroup(), "rule__DiceDiscSuk__Group__0");
			builder.put(grammarAccess.getDiceRerollSukAccess().getGroup(), "rule__DiceRerollSuk__Group__0");
			builder.put(grammarAccess.getMarkThresholdAccess().getGroup(), "rule__MarkThreshold__Group__0");
			builder.put(grammarAccess.getMarkPositionAccess().getGroup(), "rule__MarkPosition__Group__0");
			builder.put(grammarAccess.getDiscardThresholdAccess().getGroup(), "rule__DiscardThreshold__Group__0");
			builder.put(grammarAccess.getDiscardPositionAccess().getGroup(), "rule__DiscardPosition__Group__0");
			builder.put(grammarAccess.getRerollThresholdAccess().getGroup(), "rule__RerollThreshold__Group__0");
			builder.put(grammarAccess.getRerollPositionAccess().getGroup(), "rule__RerollPosition__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getLanguageAccess().getStatementAssignment(), "rule__Language__StatementAssignment");
			builder.put(grammarAccess.getSumujAccess().getDiceexprsumAssignment_2(), "rule__Sumuj__DiceexprsumAssignment_2");
			builder.put(grammarAccess.getSumujAccess().getDiceexprsumAssignment_3_1(), "rule__Sumuj__DiceexprsumAssignment_3_1");
			builder.put(grammarAccess.getSukcesyAccess().getDiceexprsukAssignment_2(), "rule__Sukcesy__DiceexprsukAssignment_2");
			builder.put(grammarAccess.getSukcesyAccess().getDiceexprsukAssignment_3_1(), "rule__Sukcesy__DiceexprsukAssignment_3_1");
			builder.put(grammarAccess.getDiceExprSumAccess().getSignAssignment_0(), "rule__DiceExprSum__SignAssignment_0");
			builder.put(grammarAccess.getDiceExprSumAccess().getMulexprAssignment_1(), "rule__DiceExprSum__MulexprAssignment_1");
			builder.put(grammarAccess.getDiceExprSumAccess().getSumruleAssignment_2_1(), "rule__DiceExprSum__SumruleAssignment_2_1");
			builder.put(grammarAccess.getDiceExprSumAccess().getSumruleAssignment_2_2_1(), "rule__DiceExprSum__SumruleAssignment_2_2_1");
			builder.put(grammarAccess.getDiceExprSukAccess().getSignAssignment_0(), "rule__DiceExprSuk__SignAssignment_0");
			builder.put(grammarAccess.getDiceExprSukAccess().getMulexprAssignment_1(), "rule__DiceExprSuk__MulexprAssignment_1");
			builder.put(grammarAccess.getDiceExprSukAccess().getSuccessruleAssignment_2_1(), "rule__DiceExprSuk__SuccessruleAssignment_2_1");
			builder.put(grammarAccess.getDiceExprSukAccess().getSuccessruleAssignment_2_2_1(), "rule__DiceExprSuk__SuccessruleAssignment_2_2_1");
			builder.put(grammarAccess.getMulExprAccess().getFormexprAssignment_0_0(), "rule__MulExpr__FormexprAssignment_0_0");
			builder.put(grammarAccess.getMulExprAccess().getNumAssignment_0_1_1(), "rule__MulExpr__NumAssignment_0_1_1");
			builder.put(grammarAccess.getMulExprAccess().getFormexprAssignment_1_1(), "rule__MulExpr__FormexprAssignment_1_1");
			builder.put(grammarAccess.getMulExprAccess().getNumAssignment_1_3_1(), "rule__MulExpr__NumAssignment_1_3_1");
			builder.put(grammarAccess.getFormAccess().getLeftAssignment_0(), "rule__Form__LeftAssignment_0");
			builder.put(grammarAccess.getFormAccess().getOperatorAssignment_1_0(), "rule__Form__OperatorAssignment_1_0");
			builder.put(grammarAccess.getFormAccess().getRightAssignment_1_1(), "rule__Form__RightAssignment_1_1");
			builder.put(grammarAccess.getSingleDiceAccess().getSidesAssignment_1(), "rule__SingleDice__SidesAssignment_1");
			builder.put(grammarAccess.getMultiDiceAccess().getCountAssignment_0(), "rule__MultiDice__CountAssignment_0");
			builder.put(grammarAccess.getMultiDiceAccess().getSidesAssignment_2(), "rule__MultiDice__SidesAssignment_2");
			builder.put(grammarAccess.getExplosionRuleAccess().getSignAssignment_0(), "rule__ExplosionRule__SignAssignment_0");
			builder.put(grammarAccess.getExplosionRuleAccess().getNumAssignment_2(), "rule__ExplosionRule__NumAssignment_2");
			builder.put(grammarAccess.getDiceMarkSumAccess().getMarkAssignment_1(), "rule__DiceMarkSum__MarkAssignment_1");
			builder.put(grammarAccess.getDiceDiscSumAccess().getDiscardAssignment_1(), "rule__DiceDiscSum__DiscardAssignment_1");
			builder.put(grammarAccess.getDiceRerollSumAccess().getRerollAssignment_1(), "rule__DiceRerollSum__RerollAssignment_1");
			builder.put(grammarAccess.getSuccessThresholdAccess().getHightlowAssignment_0(), "rule__SuccessThreshold__HightlowAssignment_0");
			builder.put(grammarAccess.getSuccessThresholdAccess().getNumAssignment_1(), "rule__SuccessThreshold__NumAssignment_1");
			builder.put(grammarAccess.getSuccessMultiplierAccess().getNumAssignment_0(), "rule__SuccessMultiplier__NumAssignment_0");
			builder.put(grammarAccess.getSuccessMultiplierAccess().getSignAssignment_2(), "rule__SuccessMultiplier__SignAssignment_2");
			builder.put(grammarAccess.getSuccessMultiplierAccess().getMultAssignment_3(), "rule__SuccessMultiplier__MultAssignment_3");
			builder.put(grammarAccess.getSuccessBasicAccess().getNumAssignment(), "rule__SuccessBasic__NumAssignment");
			builder.put(grammarAccess.getDiceMarkSukAccess().getMarkAssignment_1(), "rule__DiceMarkSuk__MarkAssignment_1");
			builder.put(grammarAccess.getDiceDiscSukAccess().getDiscardAssignment_1(), "rule__DiceDiscSuk__DiscardAssignment_1");
			builder.put(grammarAccess.getDiceRerollSukAccess().getRerollAssignment_1(), "rule__DiceRerollSuk__RerollAssignment_1");
			builder.put(grammarAccess.getMarkThresholdAccess().getHightlowAssignment_0(), "rule__MarkThreshold__HightlowAssignment_0");
			builder.put(grammarAccess.getMarkThresholdAccess().getNumAssignment_1(), "rule__MarkThreshold__NumAssignment_1");
			builder.put(grammarAccess.getMarkHighestAccess().getHightlowAssignment(), "rule__MarkHighest__HightlowAssignment");
			builder.put(grammarAccess.getMarkPositionAccess().getNumAssignment_0(), "rule__MarkPosition__NumAssignment_0");
			builder.put(grammarAccess.getMarkPositionAccess().getFirstlastAssignment_1(), "rule__MarkPosition__FirstlastAssignment_1");
			builder.put(grammarAccess.getMarkValueAccess().getNumAssignment(), "rule__MarkValue__NumAssignment");
			builder.put(grammarAccess.getDiscardThresholdAccess().getHightlowAssignment_0(), "rule__DiscardThreshold__HightlowAssignment_0");
			builder.put(grammarAccess.getDiscardThresholdAccess().getNumAssignment_1(), "rule__DiscardThreshold__NumAssignment_1");
			builder.put(grammarAccess.getDiscardHighestAccess().getHightlowAssignment(), "rule__DiscardHighest__HightlowAssignment");
			builder.put(grammarAccess.getDiscardPositionAccess().getNumAssignment_0(), "rule__DiscardPosition__NumAssignment_0");
			builder.put(grammarAccess.getDiscardPositionAccess().getFirstlastAssignment_1(), "rule__DiscardPosition__FirstlastAssignment_1");
			builder.put(grammarAccess.getDiscardValueAccess().getNumAssignment(), "rule__DiscardValue__NumAssignment");
			builder.put(grammarAccess.getRerollThresholdAccess().getHightlowAssignment_0(), "rule__RerollThreshold__HightlowAssignment_0");
			builder.put(grammarAccess.getRerollThresholdAccess().getNumAssignment_1(), "rule__RerollThreshold__NumAssignment_1");
			builder.put(grammarAccess.getRerollHighestAccess().getHightlowAssignment(), "rule__RerollHighest__HightlowAssignment");
			builder.put(grammarAccess.getRerollPositionAccess().getNumAssignment_0(), "rule__RerollPosition__NumAssignment_0");
			builder.put(grammarAccess.getRerollPositionAccess().getFirstlastAssignment_1(), "rule__RerollPosition__FirstlastAssignment_1");
			builder.put(grammarAccess.getRerollValueAccess().getNumAssignment(), "rule__RerollValue__NumAssignment");
			builder.put(grammarAccess.getNumAccess().getValueAssignment(), "rule__Num__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
