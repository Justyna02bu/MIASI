/*
 * generated by Xtext 2.32.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleLanguage
entryRuleLanguage
:
{ before(grammarAccess.getLanguageRule()); }
	 ruleLanguage
{ after(grammarAccess.getLanguageRule()); } 
	 EOF 
;

// Rule Language
ruleLanguage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLanguageAccess().getStatementAssignment()); }
		(rule__Language__StatementAssignment)
		{ after(grammarAccess.getLanguageAccess().getStatementAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStat
entryRuleStat
:
{ before(grammarAccess.getStatRule()); }
	 ruleStat
{ after(grammarAccess.getStatRule()); } 
	 EOF 
;

// Rule Stat
ruleStat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatAccess().getAlternatives()); }
		(rule__Stat__Alternatives)
		{ after(grammarAccess.getStatAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSumuj
entryRuleSumuj
:
{ before(grammarAccess.getSumujRule()); }
	 ruleSumuj
{ after(grammarAccess.getSumujRule()); } 
	 EOF 
;

// Rule Sumuj
ruleSumuj 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSumujAccess().getGroup()); }
		(rule__Sumuj__Group__0)
		{ after(grammarAccess.getSumujAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSukcesy
entryRuleSukcesy
:
{ before(grammarAccess.getSukcesyRule()); }
	 ruleSukcesy
{ after(grammarAccess.getSukcesyRule()); } 
	 EOF 
;

// Rule Sukcesy
ruleSukcesy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSukcesyAccess().getGroup()); }
		(rule__Sukcesy__Group__0)
		{ after(grammarAccess.getSukcesyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiceExprSum
entryRuleDiceExprSum
:
{ before(grammarAccess.getDiceExprSumRule()); }
	 ruleDiceExprSum
{ after(grammarAccess.getDiceExprSumRule()); } 
	 EOF 
;

// Rule DiceExprSum
ruleDiceExprSum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiceExprSumAccess().getGroup()); }
		(rule__DiceExprSum__Group__0)
		{ after(grammarAccess.getDiceExprSumAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiceExprSuk
entryRuleDiceExprSuk
:
{ before(grammarAccess.getDiceExprSukRule()); }
	 ruleDiceExprSuk
{ after(grammarAccess.getDiceExprSukRule()); } 
	 EOF 
;

// Rule DiceExprSuk
ruleDiceExprSuk 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiceExprSukAccess().getGroup()); }
		(rule__DiceExprSuk__Group__0)
		{ after(grammarAccess.getDiceExprSukAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMulExpr
entryRuleMulExpr
:
{ before(grammarAccess.getMulExprRule()); }
	 ruleMulExpr
{ after(grammarAccess.getMulExprRule()); } 
	 EOF 
;

// Rule MulExpr
ruleMulExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMulExprAccess().getAlternatives()); }
		(rule__MulExpr__Alternatives)
		{ after(grammarAccess.getMulExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForm
entryRuleForm
:
{ before(grammarAccess.getFormRule()); }
	 ruleForm
{ after(grammarAccess.getFormRule()); } 
	 EOF 
;

// Rule Form
ruleForm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFormAccess().getGroup()); }
		(rule__Form__Group__0)
		{ after(grammarAccess.getFormAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleDice
entryRuleSingleDice
:
{ before(grammarAccess.getSingleDiceRule()); }
	 ruleSingleDice
{ after(grammarAccess.getSingleDiceRule()); } 
	 EOF 
;

// Rule SingleDice
ruleSingleDice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingleDiceAccess().getGroup()); }
		(rule__SingleDice__Group__0)
		{ after(grammarAccess.getSingleDiceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiDice
entryRuleMultiDice
:
{ before(grammarAccess.getMultiDiceRule()); }
	 ruleMultiDice
{ after(grammarAccess.getMultiDiceRule()); } 
	 EOF 
;

// Rule MultiDice
ruleMultiDice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiDiceAccess().getGroup()); }
		(rule__MultiDice__Group__0)
		{ after(grammarAccess.getMultiDiceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDice
entryRuleDice
:
{ before(grammarAccess.getDiceRule()); }
	 ruleDice
{ after(grammarAccess.getDiceRule()); } 
	 EOF 
;

// Rule Dice
ruleDice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiceAccess().getAlternatives()); }
		(rule__Dice__Alternatives)
		{ after(grammarAccess.getDiceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleSum
entryRuleRuleSum
:
{ before(grammarAccess.getRuleSumRule()); }
	 ruleRuleSum
{ after(grammarAccess.getRuleSumRule()); } 
	 EOF 
;

// Rule RuleSum
ruleRuleSum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleSumAccess().getAlternatives()); }
		(rule__RuleSum__Alternatives)
		{ after(grammarAccess.getRuleSumAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExplosionRule
entryRuleExplosionRule
:
{ before(grammarAccess.getExplosionRuleRule()); }
	 ruleExplosionRule
{ after(grammarAccess.getExplosionRuleRule()); } 
	 EOF 
;

// Rule ExplosionRule
ruleExplosionRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExplosionRuleAccess().getGroup()); }
		(rule__ExplosionRule__Group__0)
		{ after(grammarAccess.getExplosionRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiceMarkSum
entryRuleDiceMarkSum
:
{ before(grammarAccess.getDiceMarkSumRule()); }
	 ruleDiceMarkSum
{ after(grammarAccess.getDiceMarkSumRule()); } 
	 EOF 
;

// Rule DiceMarkSum
ruleDiceMarkSum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiceMarkSumAccess().getGroup()); }
		(rule__DiceMarkSum__Group__0)
		{ after(grammarAccess.getDiceMarkSumAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiceDiscSum
entryRuleDiceDiscSum
:
{ before(grammarAccess.getDiceDiscSumRule()); }
	 ruleDiceDiscSum
{ after(grammarAccess.getDiceDiscSumRule()); } 
	 EOF 
;

// Rule DiceDiscSum
ruleDiceDiscSum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiceDiscSumAccess().getGroup()); }
		(rule__DiceDiscSum__Group__0)
		{ after(grammarAccess.getDiceDiscSumAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiceRerollSum
entryRuleDiceRerollSum
:
{ before(grammarAccess.getDiceRerollSumRule()); }
	 ruleDiceRerollSum
{ after(grammarAccess.getDiceRerollSumRule()); } 
	 EOF 
;

// Rule DiceRerollSum
ruleDiceRerollSum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiceRerollSumAccess().getGroup()); }
		(rule__DiceRerollSum__Group__0)
		{ after(grammarAccess.getDiceRerollSumAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleSuk
entryRuleRuleSuk
:
{ before(grammarAccess.getRuleSukRule()); }
	 ruleRuleSuk
{ after(grammarAccess.getRuleSukRule()); } 
	 EOF 
;

// Rule RuleSuk
ruleRuleSuk 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleSukAccess().getAlternatives()); }
		(rule__RuleSuk__Alternatives)
		{ after(grammarAccess.getRuleSukAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSuccessThreshold
entryRuleSuccessThreshold
:
{ before(grammarAccess.getSuccessThresholdRule()); }
	 ruleSuccessThreshold
{ after(grammarAccess.getSuccessThresholdRule()); } 
	 EOF 
;

// Rule SuccessThreshold
ruleSuccessThreshold 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSuccessThresholdAccess().getGroup()); }
		(rule__SuccessThreshold__Group__0)
		{ after(grammarAccess.getSuccessThresholdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSuccessMultiplier
entryRuleSuccessMultiplier
:
{ before(grammarAccess.getSuccessMultiplierRule()); }
	 ruleSuccessMultiplier
{ after(grammarAccess.getSuccessMultiplierRule()); } 
	 EOF 
;

// Rule SuccessMultiplier
ruleSuccessMultiplier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSuccessMultiplierAccess().getGroup()); }
		(rule__SuccessMultiplier__Group__0)
		{ after(grammarAccess.getSuccessMultiplierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSuccessBasic
entryRuleSuccessBasic
:
{ before(grammarAccess.getSuccessBasicRule()); }
	 ruleSuccessBasic
{ after(grammarAccess.getSuccessBasicRule()); } 
	 EOF 
;

// Rule SuccessBasic
ruleSuccessBasic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSuccessBasicAccess().getNumAssignment()); }
		(rule__SuccessBasic__NumAssignment)
		{ after(grammarAccess.getSuccessBasicAccess().getNumAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiceMarkSuk
entryRuleDiceMarkSuk
:
{ before(grammarAccess.getDiceMarkSukRule()); }
	 ruleDiceMarkSuk
{ after(grammarAccess.getDiceMarkSukRule()); } 
	 EOF 
;

// Rule DiceMarkSuk
ruleDiceMarkSuk 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiceMarkSukAccess().getGroup()); }
		(rule__DiceMarkSuk__Group__0)
		{ after(grammarAccess.getDiceMarkSukAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiceDiscSuk
entryRuleDiceDiscSuk
:
{ before(grammarAccess.getDiceDiscSukRule()); }
	 ruleDiceDiscSuk
{ after(grammarAccess.getDiceDiscSukRule()); } 
	 EOF 
;

// Rule DiceDiscSuk
ruleDiceDiscSuk 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiceDiscSukAccess().getGroup()); }
		(rule__DiceDiscSuk__Group__0)
		{ after(grammarAccess.getDiceDiscSukAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiceRerollSuk
entryRuleDiceRerollSuk
:
{ before(grammarAccess.getDiceRerollSukRule()); }
	 ruleDiceRerollSuk
{ after(grammarAccess.getDiceRerollSukRule()); } 
	 EOF 
;

// Rule DiceRerollSuk
ruleDiceRerollSuk 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiceRerollSukAccess().getGroup()); }
		(rule__DiceRerollSuk__Group__0)
		{ after(grammarAccess.getDiceRerollSukAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMark
entryRuleMark
:
{ before(grammarAccess.getMarkRule()); }
	 ruleMark
{ after(grammarAccess.getMarkRule()); } 
	 EOF 
;

// Rule Mark
ruleMark 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMarkAccess().getAlternatives()); }
		(rule__Mark__Alternatives)
		{ after(grammarAccess.getMarkAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMarkThreshold
entryRuleMarkThreshold
:
{ before(grammarAccess.getMarkThresholdRule()); }
	 ruleMarkThreshold
{ after(grammarAccess.getMarkThresholdRule()); } 
	 EOF 
;

// Rule MarkThreshold
ruleMarkThreshold 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMarkThresholdAccess().getGroup()); }
		(rule__MarkThreshold__Group__0)
		{ after(grammarAccess.getMarkThresholdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMarkHighest
entryRuleMarkHighest
:
{ before(grammarAccess.getMarkHighestRule()); }
	 ruleMarkHighest
{ after(grammarAccess.getMarkHighestRule()); } 
	 EOF 
;

// Rule MarkHighest
ruleMarkHighest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMarkHighestAccess().getHightlowAssignment()); }
		(rule__MarkHighest__HightlowAssignment)
		{ after(grammarAccess.getMarkHighestAccess().getHightlowAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMarkPosition
entryRuleMarkPosition
:
{ before(grammarAccess.getMarkPositionRule()); }
	 ruleMarkPosition
{ after(grammarAccess.getMarkPositionRule()); } 
	 EOF 
;

// Rule MarkPosition
ruleMarkPosition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMarkPositionAccess().getGroup()); }
		(rule__MarkPosition__Group__0)
		{ after(grammarAccess.getMarkPositionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMarkValue
entryRuleMarkValue
:
{ before(grammarAccess.getMarkValueRule()); }
	 ruleMarkValue
{ after(grammarAccess.getMarkValueRule()); } 
	 EOF 
;

// Rule MarkValue
ruleMarkValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMarkValueAccess().getNumAssignment()); }
		(rule__MarkValue__NumAssignment)
		{ after(grammarAccess.getMarkValueAccess().getNumAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiscard
entryRuleDiscard
:
{ before(grammarAccess.getDiscardRule()); }
	 ruleDiscard
{ after(grammarAccess.getDiscardRule()); } 
	 EOF 
;

// Rule Discard
ruleDiscard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiscardAccess().getAlternatives()); }
		(rule__Discard__Alternatives)
		{ after(grammarAccess.getDiscardAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiscardThreshold
entryRuleDiscardThreshold
:
{ before(grammarAccess.getDiscardThresholdRule()); }
	 ruleDiscardThreshold
{ after(grammarAccess.getDiscardThresholdRule()); } 
	 EOF 
;

// Rule DiscardThreshold
ruleDiscardThreshold 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiscardThresholdAccess().getGroup()); }
		(rule__DiscardThreshold__Group__0)
		{ after(grammarAccess.getDiscardThresholdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiscardHighest
entryRuleDiscardHighest
:
{ before(grammarAccess.getDiscardHighestRule()); }
	 ruleDiscardHighest
{ after(grammarAccess.getDiscardHighestRule()); } 
	 EOF 
;

// Rule DiscardHighest
ruleDiscardHighest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiscardHighestAccess().getHightlowAssignment()); }
		(rule__DiscardHighest__HightlowAssignment)
		{ after(grammarAccess.getDiscardHighestAccess().getHightlowAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiscardPosition
entryRuleDiscardPosition
:
{ before(grammarAccess.getDiscardPositionRule()); }
	 ruleDiscardPosition
{ after(grammarAccess.getDiscardPositionRule()); } 
	 EOF 
;

// Rule DiscardPosition
ruleDiscardPosition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiscardPositionAccess().getGroup()); }
		(rule__DiscardPosition__Group__0)
		{ after(grammarAccess.getDiscardPositionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDiscardValue
entryRuleDiscardValue
:
{ before(grammarAccess.getDiscardValueRule()); }
	 ruleDiscardValue
{ after(grammarAccess.getDiscardValueRule()); } 
	 EOF 
;

// Rule DiscardValue
ruleDiscardValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiscardValueAccess().getNumAssignment()); }
		(rule__DiscardValue__NumAssignment)
		{ after(grammarAccess.getDiscardValueAccess().getNumAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReroll
entryRuleReroll
:
{ before(grammarAccess.getRerollRule()); }
	 ruleReroll
{ after(grammarAccess.getRerollRule()); } 
	 EOF 
;

// Rule Reroll
ruleReroll 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRerollAccess().getAlternatives()); }
		(rule__Reroll__Alternatives)
		{ after(grammarAccess.getRerollAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRerollThreshold
entryRuleRerollThreshold
:
{ before(grammarAccess.getRerollThresholdRule()); }
	 ruleRerollThreshold
{ after(grammarAccess.getRerollThresholdRule()); } 
	 EOF 
;

// Rule RerollThreshold
ruleRerollThreshold 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRerollThresholdAccess().getGroup()); }
		(rule__RerollThreshold__Group__0)
		{ after(grammarAccess.getRerollThresholdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRerollHighest
entryRuleRerollHighest
:
{ before(grammarAccess.getRerollHighestRule()); }
	 ruleRerollHighest
{ after(grammarAccess.getRerollHighestRule()); } 
	 EOF 
;

// Rule RerollHighest
ruleRerollHighest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRerollHighestAccess().getHightlowAssignment()); }
		(rule__RerollHighest__HightlowAssignment)
		{ after(grammarAccess.getRerollHighestAccess().getHightlowAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRerollPosition
entryRuleRerollPosition
:
{ before(grammarAccess.getRerollPositionRule()); }
	 ruleRerollPosition
{ after(grammarAccess.getRerollPositionRule()); } 
	 EOF 
;

// Rule RerollPosition
ruleRerollPosition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRerollPositionAccess().getGroup()); }
		(rule__RerollPosition__Group__0)
		{ after(grammarAccess.getRerollPositionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRerollValue
entryRuleRerollValue
:
{ before(grammarAccess.getRerollValueRule()); }
	 ruleRerollValue
{ after(grammarAccess.getRerollValueRule()); } 
	 EOF 
;

// Rule RerollValue
ruleRerollValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRerollValueAccess().getNumAssignment()); }
		(rule__RerollValue__NumAssignment)
		{ after(grammarAccess.getRerollValueAccess().getNumAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNum
entryRuleNum
:
{ before(grammarAccess.getNumRule()); }
	 ruleNum
{ after(grammarAccess.getNumRule()); } 
	 EOF 
;

// Rule Num
ruleNum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumAccess().getValueAssignment()); }
		(rule__Num__ValueAssignment)
		{ after(grammarAccess.getNumAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Sign
ruleSign
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignAccess().getAlternatives()); }
		(rule__Sign__Alternatives)
		{ after(grammarAccess.getSignAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule FirstLast
ruleFirstLast
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFirstLastAccess().getAlternatives()); }
		(rule__FirstLast__Alternatives)
		{ after(grammarAccess.getFirstLastAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Operator
ruleOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
		(rule__Operator__Alternatives)
		{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule HighLow
ruleHighLow
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHighLowAccess().getAlternatives()); }
		(rule__HighLow__Alternatives)
		{ after(grammarAccess.getHighLowAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stat__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatAccess().getSumujParserRuleCall_0()); }
		ruleSumuj
		{ after(grammarAccess.getStatAccess().getSumujParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatAccess().getSukcesyParserRuleCall_1()); }
		ruleSukcesy
		{ after(grammarAccess.getStatAccess().getSukcesyParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Alternatives_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSumujAccess().getFullStopKeyword_5_0()); }
		'.'
		{ after(grammarAccess.getSumujAccess().getFullStopKeyword_5_0()); }
	)
	|
	(
		{ before(grammarAccess.getSumujAccess().getCommaKeyword_5_1()); }
		','
		{ after(grammarAccess.getSumujAccess().getCommaKeyword_5_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Alternatives_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSukcesyAccess().getFullStopKeyword_5_0()); }
		'.'
		{ after(grammarAccess.getSukcesyAccess().getFullStopKeyword_5_0()); }
	)
	|
	(
		{ before(grammarAccess.getSukcesyAccess().getCommaKeyword_5_1()); }
		','
		{ after(grammarAccess.getSukcesyAccess().getCommaKeyword_5_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulExprAccess().getGroup_0()); }
		(rule__MulExpr__Group_0__0)
		{ after(grammarAccess.getMulExprAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getMulExprAccess().getGroup_1()); }
		(rule__MulExpr__Group_1__0)
		{ after(grammarAccess.getMulExprAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dice__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceAccess().getSingleDiceParserRuleCall_0()); }
		ruleSingleDice
		{ after(grammarAccess.getDiceAccess().getSingleDiceParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDiceAccess().getMultiDiceParserRuleCall_1()); }
		ruleMultiDice
		{ after(grammarAccess.getDiceAccess().getMultiDiceParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleSum__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleSumAccess().getExplosionRuleParserRuleCall_0()); }
		ruleExplosionRule
		{ after(grammarAccess.getRuleSumAccess().getExplosionRuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRuleSumAccess().getDiceMarkSumParserRuleCall_1()); }
		ruleDiceMarkSum
		{ after(grammarAccess.getRuleSumAccess().getDiceMarkSumParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRuleSumAccess().getDiceDiscSumParserRuleCall_2()); }
		ruleDiceDiscSum
		{ after(grammarAccess.getRuleSumAccess().getDiceDiscSumParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getRuleSumAccess().getDiceRerollSumParserRuleCall_3()); }
		ruleDiceRerollSum
		{ after(grammarAccess.getRuleSumAccess().getDiceRerollSumParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleSuk__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleSukAccess().getGroup_0()); }
		(rule__RuleSuk__Group_0__0)
		{ after(grammarAccess.getRuleSukAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getRuleSukAccess().getDiceMarkSukParserRuleCall_1()); }
		ruleDiceMarkSuk
		{ after(grammarAccess.getRuleSukAccess().getDiceMarkSukParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRuleSukAccess().getDiceDiscSukParserRuleCall_2()); }
		ruleDiceDiscSuk
		{ after(grammarAccess.getRuleSukAccess().getDiceDiscSukParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getRuleSukAccess().getDiceRerollSukParserRuleCall_3()); }
		ruleDiceRerollSuk
		{ after(grammarAccess.getRuleSukAccess().getDiceRerollSukParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleSuk__Alternatives_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleSukAccess().getSuccessThresholdParserRuleCall_0_1_0()); }
		ruleSuccessThreshold
		{ after(grammarAccess.getRuleSukAccess().getSuccessThresholdParserRuleCall_0_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getRuleSukAccess().getSuccessMultiplierParserRuleCall_0_1_1()); }
		ruleSuccessMultiplier
		{ after(grammarAccess.getRuleSukAccess().getSuccessMultiplierParserRuleCall_0_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getRuleSukAccess().getSuccessBasicParserRuleCall_0_1_2()); }
		ruleSuccessBasic
		{ after(grammarAccess.getRuleSukAccess().getSuccessBasicParserRuleCall_0_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMarkAccess().getMarkThresholdParserRuleCall_0()); }
		ruleMarkThreshold
		{ after(grammarAccess.getMarkAccess().getMarkThresholdParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMarkAccess().getMarkHighestParserRuleCall_1()); }
		ruleMarkHighest
		{ after(grammarAccess.getMarkAccess().getMarkHighestParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getMarkAccess().getMarkPositionParserRuleCall_2()); }
		ruleMarkPosition
		{ after(grammarAccess.getMarkAccess().getMarkPositionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getMarkAccess().getMarkValueParserRuleCall_3()); }
		ruleMarkValue
		{ after(grammarAccess.getMarkAccess().getMarkValueParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Discard__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiscardAccess().getDiscardThresholdParserRuleCall_0()); }
		ruleDiscardThreshold
		{ after(grammarAccess.getDiscardAccess().getDiscardThresholdParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDiscardAccess().getDiscardHighestParserRuleCall_1()); }
		ruleDiscardHighest
		{ after(grammarAccess.getDiscardAccess().getDiscardHighestParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getDiscardAccess().getDiscardPositionParserRuleCall_2()); }
		ruleDiscardPosition
		{ after(grammarAccess.getDiscardAccess().getDiscardPositionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getDiscardAccess().getDiscardValueParserRuleCall_3()); }
		ruleDiscardValue
		{ after(grammarAccess.getDiscardAccess().getDiscardValueParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reroll__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRerollAccess().getRerollThresholdParserRuleCall_0()); }
		ruleRerollThreshold
		{ after(grammarAccess.getRerollAccess().getRerollThresholdParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRerollAccess().getRerollHighestParserRuleCall_1()); }
		ruleRerollHighest
		{ after(grammarAccess.getRerollAccess().getRerollHighestParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRerollAccess().getRerollPositionParserRuleCall_2()); }
		ruleRerollPosition
		{ after(grammarAccess.getRerollAccess().getRerollPositionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getRerollAccess().getRerollValueParserRuleCall_3()); }
		ruleRerollValue
		{ after(grammarAccess.getRerollAccess().getRerollValueParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sign__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignAccess().getADDEnumLiteralDeclaration_0()); }
		('+')
		{ after(grammarAccess.getSignAccess().getADDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSignAccess().getADDEnumLiteralDeclaration_1()); }
		('dodawaj')
		{ after(grammarAccess.getSignAccess().getADDEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getSignAccess().getSUBEnumLiteralDeclaration_2()); }
		('odejmuj')
		{ after(grammarAccess.getSignAccess().getSUBEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getSignAccess().getSUBEnumLiteralDeclaration_3()); }
		('- ')
		{ after(grammarAccess.getSignAccess().getSUBEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FirstLast__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFirstLastAccess().getFIRSTEnumLiteralDeclaration_0()); }
		('pierwsze')
		{ after(grammarAccess.getFirstLastAccess().getFIRSTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getFirstLastAccess().getLASTEnumLiteralDeclaration_1()); }
		('ostatnie')
		{ after(grammarAccess.getFirstLastAccess().getLASTEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getADDEnumLiteralDeclaration_0()); }
		('+')
		{ after(grammarAccess.getOperatorAccess().getADDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getSUBEnumLiteralDeclaration_1()); }
		('- ')
		{ after(grammarAccess.getOperatorAccess().getSUBEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getMULEnumLiteralDeclaration_2()); }
		('*')
		{ after(grammarAccess.getOperatorAccess().getMULEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getDIVEnumLiteralDeclaration_3()); }
		('/')
		{ after(grammarAccess.getOperatorAccess().getDIVEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HighLow__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHighLowAccess().getHIGHEnumLiteralDeclaration_0()); }
		('najwyzsze')
		{ after(grammarAccess.getHighLowAccess().getHIGHEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getHighLowAccess().getLOWEnumLiteralDeclaration_1()); }
		('najnizsze')
		{ after(grammarAccess.getHighLowAccess().getLOWEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getHighLowAccess().getHIGHEnumLiteralDeclaration_2()); }
		('wiecej niz')
		{ after(grammarAccess.getHighLowAccess().getHIGHEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getHighLowAccess().getLOWEnumLiteralDeclaration_3()); }
		('mniej niz')
		{ after(grammarAccess.getHighLowAccess().getLOWEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sumuj__Group__0__Impl
	rule__Sumuj__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumujAccess().getSumujKeyword_0()); }
	'Sumuj'
	{ after(grammarAccess.getSumujAccess().getSumujKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sumuj__Group__1__Impl
	rule__Sumuj__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumujAccess().getLineFeedKeyword_1()); }
	('\n')?
	{ after(grammarAccess.getSumujAccess().getLineFeedKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sumuj__Group__2__Impl
	rule__Sumuj__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumujAccess().getDiceexprsumAssignment_2()); }
	(rule__Sumuj__DiceexprsumAssignment_2)
	{ after(grammarAccess.getSumujAccess().getDiceexprsumAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sumuj__Group__3__Impl
	rule__Sumuj__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumujAccess().getGroup_3()); }
	(rule__Sumuj__Group_3__0)*
	{ after(grammarAccess.getSumujAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sumuj__Group__4__Impl
	rule__Sumuj__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumujAccess().getLineFeedKeyword_4()); }
	('\n')?
	{ after(grammarAccess.getSumujAccess().getLineFeedKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sumuj__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumujAccess().getAlternatives_5()); }
	(rule__Sumuj__Alternatives_5)?
	{ after(grammarAccess.getSumujAccess().getAlternatives_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sumuj__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sumuj__Group_3__0__Impl
	rule__Sumuj__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumujAccess().getSemicolonKeyword_3_0()); }
	';'
	{ after(grammarAccess.getSumujAccess().getSemicolonKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sumuj__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumujAccess().getDiceexprsumAssignment_3_1()); }
	(rule__Sumuj__DiceexprsumAssignment_3_1)
	{ after(grammarAccess.getSumujAccess().getDiceexprsumAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sukcesy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sukcesy__Group__0__Impl
	rule__Sukcesy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSukcesyAccess().getSukcesyKeyword_0()); }
	'Sukcesy'
	{ after(grammarAccess.getSukcesyAccess().getSukcesyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sukcesy__Group__1__Impl
	rule__Sukcesy__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSukcesyAccess().getLineFeedKeyword_1()); }
	('\n')?
	{ after(grammarAccess.getSukcesyAccess().getLineFeedKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sukcesy__Group__2__Impl
	rule__Sukcesy__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSukcesyAccess().getDiceexprsukAssignment_2()); }
	(rule__Sukcesy__DiceexprsukAssignment_2)
	{ after(grammarAccess.getSukcesyAccess().getDiceexprsukAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sukcesy__Group__3__Impl
	rule__Sukcesy__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSukcesyAccess().getGroup_3()); }
	(rule__Sukcesy__Group_3__0)*
	{ after(grammarAccess.getSukcesyAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sukcesy__Group__4__Impl
	rule__Sukcesy__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSukcesyAccess().getLineFeedKeyword_4()); }
	('\n')?
	{ after(grammarAccess.getSukcesyAccess().getLineFeedKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sukcesy__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSukcesyAccess().getAlternatives_5()); }
	(rule__Sukcesy__Alternatives_5)?
	{ after(grammarAccess.getSukcesyAccess().getAlternatives_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sukcesy__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sukcesy__Group_3__0__Impl
	rule__Sukcesy__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSukcesyAccess().getSemicolonKeyword_3_0()); }
	';'
	{ after(grammarAccess.getSukcesyAccess().getSemicolonKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sukcesy__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSukcesyAccess().getDiceexprsukAssignment_3_1()); }
	(rule__Sukcesy__DiceexprsukAssignment_3_1)
	{ after(grammarAccess.getSukcesyAccess().getDiceexprsukAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DiceExprSum__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSum__Group__0__Impl
	rule__DiceExprSum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSumAccess().getSignAssignment_0()); }
	(rule__DiceExprSum__SignAssignment_0)?
	{ after(grammarAccess.getDiceExprSumAccess().getSignAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSum__Group__1__Impl
	rule__DiceExprSum__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSumAccess().getMulexprAssignment_1()); }
	(rule__DiceExprSum__MulexprAssignment_1)
	{ after(grammarAccess.getDiceExprSumAccess().getMulexprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSum__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSumAccess().getGroup_2()); }
	(rule__DiceExprSum__Group_2__0)?
	{ after(grammarAccess.getDiceExprSumAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DiceExprSum__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSum__Group_2__0__Impl
	rule__DiceExprSum__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSumAccess().getColonKeyword_2_0()); }
	':'
	{ after(grammarAccess.getDiceExprSumAccess().getColonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSum__Group_2__1__Impl
	rule__DiceExprSum__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSumAccess().getSumruleAssignment_2_1()); }
	(rule__DiceExprSum__SumruleAssignment_2_1)
	{ after(grammarAccess.getDiceExprSumAccess().getSumruleAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSum__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSumAccess().getGroup_2_2()); }
	(rule__DiceExprSum__Group_2_2__0)*
	{ after(grammarAccess.getDiceExprSumAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DiceExprSum__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSum__Group_2_2__0__Impl
	rule__DiceExprSum__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSumAccess().getCommaKeyword_2_2_0()); }
	','
	{ after(grammarAccess.getDiceExprSumAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSum__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSumAccess().getSumruleAssignment_2_2_1()); }
	(rule__DiceExprSum__SumruleAssignment_2_2_1)
	{ after(grammarAccess.getDiceExprSumAccess().getSumruleAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DiceExprSuk__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSuk__Group__0__Impl
	rule__DiceExprSuk__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSukAccess().getSignAssignment_0()); }
	(rule__DiceExprSuk__SignAssignment_0)?
	{ after(grammarAccess.getDiceExprSukAccess().getSignAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSuk__Group__1__Impl
	rule__DiceExprSuk__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSukAccess().getMulexprAssignment_1()); }
	(rule__DiceExprSuk__MulexprAssignment_1)
	{ after(grammarAccess.getDiceExprSukAccess().getMulexprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSuk__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSukAccess().getGroup_2()); }
	(rule__DiceExprSuk__Group_2__0)?
	{ after(grammarAccess.getDiceExprSukAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DiceExprSuk__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSuk__Group_2__0__Impl
	rule__DiceExprSuk__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSukAccess().getColonKeyword_2_0()); }
	':'
	{ after(grammarAccess.getDiceExprSukAccess().getColonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSuk__Group_2__1__Impl
	rule__DiceExprSuk__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSukAccess().getSuccessruleAssignment_2_1()); }
	(rule__DiceExprSuk__SuccessruleAssignment_2_1)
	{ after(grammarAccess.getDiceExprSukAccess().getSuccessruleAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSuk__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSukAccess().getGroup_2_2()); }
	(rule__DiceExprSuk__Group_2_2__0)*
	{ after(grammarAccess.getDiceExprSukAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DiceExprSuk__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSuk__Group_2_2__0__Impl
	rule__DiceExprSuk__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSukAccess().getCommaKeyword_2_2_0()); }
	','
	{ after(grammarAccess.getDiceExprSukAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceExprSuk__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceExprSukAccess().getSuccessruleAssignment_2_2_1()); }
	(rule__DiceExprSuk__SuccessruleAssignment_2_2_1)
	{ after(grammarAccess.getDiceExprSukAccess().getSuccessruleAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulExpr__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpr__Group_0__0__Impl
	rule__MulExpr__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExprAccess().getFormexprAssignment_0_0()); }
	(rule__MulExpr__FormexprAssignment_0_0)
	{ after(grammarAccess.getMulExprAccess().getFormexprAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpr__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExprAccess().getGroup_0_1()); }
	(rule__MulExpr__Group_0_1__0)?
	{ after(grammarAccess.getMulExprAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulExpr__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpr__Group_0_1__0__Impl
	rule__MulExpr__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExprAccess().getRazyKeyword_0_1_0()); }
	'razy'
	{ after(grammarAccess.getMulExprAccess().getRazyKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpr__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExprAccess().getNumAssignment_0_1_1()); }
	(rule__MulExpr__NumAssignment_0_1_1)
	{ after(grammarAccess.getMulExprAccess().getNumAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpr__Group_1__0__Impl
	rule__MulExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExprAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getMulExprAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpr__Group_1__1__Impl
	rule__MulExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExprAccess().getFormexprAssignment_1_1()); }
	(rule__MulExpr__FormexprAssignment_1_1)
	{ after(grammarAccess.getMulExprAccess().getFormexprAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpr__Group_1__2__Impl
	rule__MulExpr__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExprAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getMulExprAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpr__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExprAccess().getGroup_1_3()); }
	(rule__MulExpr__Group_1_3__0)?
	{ after(grammarAccess.getMulExprAccess().getGroup_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulExpr__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpr__Group_1_3__0__Impl
	rule__MulExpr__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExprAccess().getRazyKeyword_1_3_0()); }
	'razy'
	{ after(grammarAccess.getMulExprAccess().getRazyKeyword_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulExpr__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulExprAccess().getNumAssignment_1_3_1()); }
	(rule__MulExpr__NumAssignment_1_3_1)
	{ after(grammarAccess.getMulExprAccess().getNumAssignment_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Form__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Form__Group__0__Impl
	rule__Form__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormAccess().getLeftAssignment_0()); }
	(rule__Form__LeftAssignment_0)
	{ after(grammarAccess.getFormAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Form__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormAccess().getGroup_1()); }
	(rule__Form__Group_1__0)?
	{ after(grammarAccess.getFormAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Form__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Form__Group_1__0__Impl
	rule__Form__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormAccess().getOperatorAssignment_1_0()); }
	(rule__Form__OperatorAssignment_1_0)
	{ after(grammarAccess.getFormAccess().getOperatorAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Form__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormAccess().getRightAssignment_1_1()); }
	(rule__Form__RightAssignment_1_1)
	{ after(grammarAccess.getFormAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SingleDice__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SingleDice__Group__0__Impl
	rule__SingleDice__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleDice__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingleDiceAccess().getDTerminalRuleCall_0()); }
	RULE_D
	{ after(grammarAccess.getSingleDiceAccess().getDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleDice__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SingleDice__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleDice__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingleDiceAccess().getSidesAssignment_1()); }
	(rule__SingleDice__SidesAssignment_1)
	{ after(grammarAccess.getSingleDiceAccess().getSidesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiDice__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiDice__Group__0__Impl
	rule__MultiDice__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiDice__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiDiceAccess().getCountAssignment_0()); }
	(rule__MultiDice__CountAssignment_0)
	{ after(grammarAccess.getMultiDiceAccess().getCountAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiDice__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiDice__Group__1__Impl
	rule__MultiDice__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiDice__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiDiceAccess().getDTerminalRuleCall_1()); }
	RULE_D
	{ after(grammarAccess.getMultiDiceAccess().getDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiDice__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiDice__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiDice__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiDiceAccess().getSidesAssignment_2()); }
	(rule__MultiDice__SidesAssignment_2)
	{ after(grammarAccess.getMultiDiceAccess().getSidesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExplosionRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplosionRule__Group__0__Impl
	rule__ExplosionRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplosionRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplosionRuleAccess().getSignAssignment_0()); }
	(rule__ExplosionRule__SignAssignment_0)
	{ after(grammarAccess.getExplosionRuleAccess().getSignAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplosionRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplosionRule__Group__1__Impl
	rule__ExplosionRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplosionRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplosionRuleAccess().getWybuchoweKeyword_1()); }
	'wybuchowe'
	{ after(grammarAccess.getExplosionRuleAccess().getWybuchoweKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplosionRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplosionRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplosionRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplosionRuleAccess().getNumAssignment_2()); }
	(rule__ExplosionRule__NumAssignment_2)
	{ after(grammarAccess.getExplosionRuleAccess().getNumAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DiceMarkSum__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceMarkSum__Group__0__Impl
	rule__DiceMarkSum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceMarkSum__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceMarkSumAccess().getOznaczKeyword_0()); }
	'oznacz'
	{ after(grammarAccess.getDiceMarkSumAccess().getOznaczKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceMarkSum__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceMarkSum__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceMarkSum__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceMarkSumAccess().getMarkAssignment_1()); }
	(rule__DiceMarkSum__MarkAssignment_1)
	{ after(grammarAccess.getDiceMarkSumAccess().getMarkAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DiceDiscSum__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceDiscSum__Group__0__Impl
	rule__DiceDiscSum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceDiscSum__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceDiscSumAccess().getOdrzucKeyword_0()); }
	'odrzuc'
	{ after(grammarAccess.getDiceDiscSumAccess().getOdrzucKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceDiscSum__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceDiscSum__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceDiscSum__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceDiscSumAccess().getDiscardAssignment_1()); }
	(rule__DiceDiscSum__DiscardAssignment_1)
	{ after(grammarAccess.getDiceDiscSumAccess().getDiscardAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DiceRerollSum__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceRerollSum__Group__0__Impl
	rule__DiceRerollSum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceRerollSum__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceRerollSumAccess().getPrzerzucKeyword_0()); }
	'przerzuc'
	{ after(grammarAccess.getDiceRerollSumAccess().getPrzerzucKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceRerollSum__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceRerollSum__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceRerollSum__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceRerollSumAccess().getRerollAssignment_1()); }
	(rule__DiceRerollSum__RerollAssignment_1)
	{ after(grammarAccess.getDiceRerollSumAccess().getRerollAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleSuk__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleSuk__Group_0__0__Impl
	rule__RuleSuk__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleSuk__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleSukAccess().getSukcesKeyword_0_0()); }
	'sukces'
	{ after(grammarAccess.getRuleSukAccess().getSukcesKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleSuk__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RuleSuk__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleSuk__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleSukAccess().getAlternatives_0_1()); }
	(rule__RuleSuk__Alternatives_0_1)
	{ after(grammarAccess.getRuleSukAccess().getAlternatives_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SuccessThreshold__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuccessThreshold__Group__0__Impl
	rule__SuccessThreshold__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessThreshold__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuccessThresholdAccess().getHightlowAssignment_0()); }
	(rule__SuccessThreshold__HightlowAssignment_0)
	{ after(grammarAccess.getSuccessThresholdAccess().getHightlowAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessThreshold__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuccessThreshold__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessThreshold__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuccessThresholdAccess().getNumAssignment_1()); }
	(rule__SuccessThreshold__NumAssignment_1)
	{ after(grammarAccess.getSuccessThresholdAccess().getNumAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SuccessMultiplier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuccessMultiplier__Group__0__Impl
	rule__SuccessMultiplier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessMultiplier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuccessMultiplierAccess().getNumAssignment_0()); }
	(rule__SuccessMultiplier__NumAssignment_0)
	{ after(grammarAccess.getSuccessMultiplierAccess().getNumAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessMultiplier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuccessMultiplier__Group__1__Impl
	rule__SuccessMultiplier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessMultiplier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuccessMultiplierAccess().getRazyKeyword_1()); }
	'razy'
	{ after(grammarAccess.getSuccessMultiplierAccess().getRazyKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessMultiplier__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuccessMultiplier__Group__2__Impl
	rule__SuccessMultiplier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessMultiplier__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuccessMultiplierAccess().getSignAssignment_2()); }
	(rule__SuccessMultiplier__SignAssignment_2)?
	{ after(grammarAccess.getSuccessMultiplierAccess().getSignAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessMultiplier__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuccessMultiplier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessMultiplier__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuccessMultiplierAccess().getMultAssignment_3()); }
	(rule__SuccessMultiplier__MultAssignment_3)
	{ after(grammarAccess.getSuccessMultiplierAccess().getMultAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DiceMarkSuk__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceMarkSuk__Group__0__Impl
	rule__DiceMarkSuk__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceMarkSuk__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceMarkSukAccess().getOznaczKeyword_0()); }
	'oznacz'
	{ after(grammarAccess.getDiceMarkSukAccess().getOznaczKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceMarkSuk__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceMarkSuk__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceMarkSuk__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceMarkSukAccess().getMarkAssignment_1()); }
	(rule__DiceMarkSuk__MarkAssignment_1)
	{ after(grammarAccess.getDiceMarkSukAccess().getMarkAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DiceDiscSuk__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceDiscSuk__Group__0__Impl
	rule__DiceDiscSuk__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceDiscSuk__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceDiscSukAccess().getOdrzucKeyword_0()); }
	'odrzuc'
	{ after(grammarAccess.getDiceDiscSukAccess().getOdrzucKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceDiscSuk__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceDiscSuk__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceDiscSuk__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceDiscSukAccess().getDiscardAssignment_1()); }
	(rule__DiceDiscSuk__DiscardAssignment_1)
	{ after(grammarAccess.getDiceDiscSukAccess().getDiscardAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DiceRerollSuk__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceRerollSuk__Group__0__Impl
	rule__DiceRerollSuk__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceRerollSuk__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceRerollSukAccess().getPrzerzucKeyword_0()); }
	'przerzuc'
	{ after(grammarAccess.getDiceRerollSukAccess().getPrzerzucKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceRerollSuk__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiceRerollSuk__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceRerollSuk__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiceRerollSukAccess().getRerollAssignment_1()); }
	(rule__DiceRerollSuk__RerollAssignment_1)
	{ after(grammarAccess.getDiceRerollSukAccess().getRerollAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MarkThreshold__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkThreshold__Group__0__Impl
	rule__MarkThreshold__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkThreshold__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkThresholdAccess().getHightlowAssignment_0()); }
	(rule__MarkThreshold__HightlowAssignment_0)
	{ after(grammarAccess.getMarkThresholdAccess().getHightlowAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkThreshold__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkThreshold__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkThreshold__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkThresholdAccess().getNumAssignment_1()); }
	(rule__MarkThreshold__NumAssignment_1)
	{ after(grammarAccess.getMarkThresholdAccess().getNumAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MarkPosition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkPosition__Group__0__Impl
	rule__MarkPosition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkPosition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkPositionAccess().getNumAssignment_0()); }
	(rule__MarkPosition__NumAssignment_0)
	{ after(grammarAccess.getMarkPositionAccess().getNumAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkPosition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkPosition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkPosition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkPositionAccess().getFirstlastAssignment_1()); }
	(rule__MarkPosition__FirstlastAssignment_1)
	{ after(grammarAccess.getMarkPositionAccess().getFirstlastAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DiscardThreshold__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiscardThreshold__Group__0__Impl
	rule__DiscardThreshold__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DiscardThreshold__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiscardThresholdAccess().getHightlowAssignment_0()); }
	(rule__DiscardThreshold__HightlowAssignment_0)
	{ after(grammarAccess.getDiscardThresholdAccess().getHightlowAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiscardThreshold__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiscardThreshold__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DiscardThreshold__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiscardThresholdAccess().getNumAssignment_1()); }
	(rule__DiscardThreshold__NumAssignment_1)
	{ after(grammarAccess.getDiscardThresholdAccess().getNumAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DiscardPosition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiscardPosition__Group__0__Impl
	rule__DiscardPosition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DiscardPosition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiscardPositionAccess().getNumAssignment_0()); }
	(rule__DiscardPosition__NumAssignment_0)
	{ after(grammarAccess.getDiscardPositionAccess().getNumAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiscardPosition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DiscardPosition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DiscardPosition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiscardPositionAccess().getFirstlastAssignment_1()); }
	(rule__DiscardPosition__FirstlastAssignment_1)
	{ after(grammarAccess.getDiscardPositionAccess().getFirstlastAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RerollThreshold__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RerollThreshold__Group__0__Impl
	rule__RerollThreshold__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RerollThreshold__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRerollThresholdAccess().getHightlowAssignment_0()); }
	(rule__RerollThreshold__HightlowAssignment_0)
	{ after(grammarAccess.getRerollThresholdAccess().getHightlowAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RerollThreshold__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RerollThreshold__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RerollThreshold__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRerollThresholdAccess().getNumAssignment_1()); }
	(rule__RerollThreshold__NumAssignment_1)
	{ after(grammarAccess.getRerollThresholdAccess().getNumAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RerollPosition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RerollPosition__Group__0__Impl
	rule__RerollPosition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RerollPosition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRerollPositionAccess().getNumAssignment_0()); }
	(rule__RerollPosition__NumAssignment_0)
	{ after(grammarAccess.getRerollPositionAccess().getNumAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RerollPosition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RerollPosition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RerollPosition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRerollPositionAccess().getFirstlastAssignment_1()); }
	(rule__RerollPosition__FirstlastAssignment_1)
	{ after(grammarAccess.getRerollPositionAccess().getFirstlastAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Language__StatementAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLanguageAccess().getStatementStatParserRuleCall_0()); }
		ruleStat
		{ after(grammarAccess.getLanguageAccess().getStatementStatParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__DiceexprsumAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSumujAccess().getDiceexprsumDiceExprSumParserRuleCall_2_0()); }
		ruleDiceExprSum
		{ after(grammarAccess.getSumujAccess().getDiceexprsumDiceExprSumParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumuj__DiceexprsumAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSumujAccess().getDiceexprsumDiceExprSumParserRuleCall_3_1_0()); }
		ruleDiceExprSum
		{ after(grammarAccess.getSumujAccess().getDiceexprsumDiceExprSumParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__DiceexprsukAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSukcesyAccess().getDiceexprsukDiceExprSukParserRuleCall_2_0()); }
		ruleDiceExprSuk
		{ after(grammarAccess.getSukcesyAccess().getDiceexprsukDiceExprSukParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sukcesy__DiceexprsukAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSukcesyAccess().getDiceexprsukDiceExprSukParserRuleCall_3_1_0()); }
		ruleDiceExprSuk
		{ after(grammarAccess.getSukcesyAccess().getDiceexprsukDiceExprSukParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__SignAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceExprSumAccess().getSignSignEnumRuleCall_0_0()); }
		ruleSign
		{ after(grammarAccess.getDiceExprSumAccess().getSignSignEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__MulexprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceExprSumAccess().getMulexprMulExprParserRuleCall_1_0()); }
		ruleMulExpr
		{ after(grammarAccess.getDiceExprSumAccess().getMulexprMulExprParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__SumruleAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceExprSumAccess().getSumruleRuleSumParserRuleCall_2_1_0()); }
		ruleRuleSum
		{ after(grammarAccess.getDiceExprSumAccess().getSumruleRuleSumParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSum__SumruleAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceExprSumAccess().getSumruleRuleSumParserRuleCall_2_2_1_0()); }
		ruleRuleSum
		{ after(grammarAccess.getDiceExprSumAccess().getSumruleRuleSumParserRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__SignAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceExprSukAccess().getSignSignEnumRuleCall_0_0()); }
		ruleSign
		{ after(grammarAccess.getDiceExprSukAccess().getSignSignEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__MulexprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceExprSukAccess().getMulexprMulExprParserRuleCall_1_0()); }
		ruleMulExpr
		{ after(grammarAccess.getDiceExprSukAccess().getMulexprMulExprParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__SuccessruleAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceExprSukAccess().getSuccessruleRuleSukParserRuleCall_2_1_0()); }
		ruleRuleSuk
		{ after(grammarAccess.getDiceExprSukAccess().getSuccessruleRuleSukParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceExprSuk__SuccessruleAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceExprSukAccess().getSuccessruleRuleSukParserRuleCall_2_2_1_0()); }
		ruleRuleSuk
		{ after(grammarAccess.getDiceExprSukAccess().getSuccessruleRuleSukParserRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__FormexprAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulExprAccess().getFormexprFormParserRuleCall_0_0_0()); }
		ruleForm
		{ after(grammarAccess.getMulExprAccess().getFormexprFormParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__NumAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulExprAccess().getNumNumParserRuleCall_0_1_1_0()); }
		ruleNum
		{ after(grammarAccess.getMulExprAccess().getNumNumParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__FormexprAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulExprAccess().getFormexprFormParserRuleCall_1_1_0()); }
		ruleForm
		{ after(grammarAccess.getMulExprAccess().getFormexprFormParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulExpr__NumAssignment_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulExprAccess().getNumNumParserRuleCall_1_3_1_0()); }
		ruleNum
		{ after(grammarAccess.getMulExprAccess().getNumNumParserRuleCall_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormAccess().getLeftDiceParserRuleCall_0_0()); }
		ruleDice
		{ after(grammarAccess.getFormAccess().getLeftDiceParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__OperatorAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormAccess().getOperatorOperatorEnumRuleCall_1_0_0()); }
		ruleOperator
		{ after(grammarAccess.getFormAccess().getOperatorOperatorEnumRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Form__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormAccess().getRightNumParserRuleCall_1_1_0()); }
		ruleNum
		{ after(grammarAccess.getFormAccess().getRightNumParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleDice__SidesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleDiceAccess().getSidesNumParserRuleCall_1_0()); }
		ruleNum
		{ after(grammarAccess.getSingleDiceAccess().getSidesNumParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiDice__CountAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiDiceAccess().getCountNumParserRuleCall_0_0()); }
		ruleNum
		{ after(grammarAccess.getMultiDiceAccess().getCountNumParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiDice__SidesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiDiceAccess().getSidesNumParserRuleCall_2_0()); }
		ruleNum
		{ after(grammarAccess.getMultiDiceAccess().getSidesNumParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplosionRule__SignAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExplosionRuleAccess().getSignSignEnumRuleCall_0_0()); }
		ruleSign
		{ after(grammarAccess.getExplosionRuleAccess().getSignSignEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplosionRule__NumAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExplosionRuleAccess().getNumNumParserRuleCall_2_0()); }
		ruleNum
		{ after(grammarAccess.getExplosionRuleAccess().getNumNumParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceMarkSum__MarkAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceMarkSumAccess().getMarkMarkParserRuleCall_1_0()); }
		ruleMark
		{ after(grammarAccess.getDiceMarkSumAccess().getMarkMarkParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceDiscSum__DiscardAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceDiscSumAccess().getDiscardDiscardParserRuleCall_1_0()); }
		ruleDiscard
		{ after(grammarAccess.getDiceDiscSumAccess().getDiscardDiscardParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceRerollSum__RerollAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceRerollSumAccess().getRerollRerollParserRuleCall_1_0()); }
		ruleReroll
		{ after(grammarAccess.getDiceRerollSumAccess().getRerollRerollParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessThreshold__HightlowAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSuccessThresholdAccess().getHightlowHighLowEnumRuleCall_0_0()); }
		ruleHighLow
		{ after(grammarAccess.getSuccessThresholdAccess().getHightlowHighLowEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessThreshold__NumAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSuccessThresholdAccess().getNumNumParserRuleCall_1_0()); }
		ruleNum
		{ after(grammarAccess.getSuccessThresholdAccess().getNumNumParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessMultiplier__NumAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSuccessMultiplierAccess().getNumNumParserRuleCall_0_0()); }
		ruleNum
		{ after(grammarAccess.getSuccessMultiplierAccess().getNumNumParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessMultiplier__SignAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSuccessMultiplierAccess().getSignSignEnumRuleCall_2_0()); }
		ruleSign
		{ after(grammarAccess.getSuccessMultiplierAccess().getSignSignEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessMultiplier__MultAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSuccessMultiplierAccess().getMultNumParserRuleCall_3_0()); }
		ruleNum
		{ after(grammarAccess.getSuccessMultiplierAccess().getMultNumParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuccessBasic__NumAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSuccessBasicAccess().getNumNumParserRuleCall_0()); }
		ruleNum
		{ after(grammarAccess.getSuccessBasicAccess().getNumNumParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceMarkSuk__MarkAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceMarkSukAccess().getMarkMarkParserRuleCall_1_0()); }
		ruleMark
		{ after(grammarAccess.getDiceMarkSukAccess().getMarkMarkParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceDiscSuk__DiscardAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceDiscSukAccess().getDiscardDiscardParserRuleCall_1_0()); }
		ruleDiscard
		{ after(grammarAccess.getDiceDiscSukAccess().getDiscardDiscardParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiceRerollSuk__RerollAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiceRerollSukAccess().getRerollRerollParserRuleCall_1_0()); }
		ruleReroll
		{ after(grammarAccess.getDiceRerollSukAccess().getRerollRerollParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkThreshold__HightlowAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMarkThresholdAccess().getHightlowHighLowEnumRuleCall_0_0()); }
		ruleHighLow
		{ after(grammarAccess.getMarkThresholdAccess().getHightlowHighLowEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkThreshold__NumAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMarkThresholdAccess().getNumNumParserRuleCall_1_0()); }
		ruleNum
		{ after(grammarAccess.getMarkThresholdAccess().getNumNumParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkHighest__HightlowAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMarkHighestAccess().getHightlowHighLowEnumRuleCall_0()); }
		ruleHighLow
		{ after(grammarAccess.getMarkHighestAccess().getHightlowHighLowEnumRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkPosition__NumAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMarkPositionAccess().getNumNumParserRuleCall_0_0()); }
		ruleNum
		{ after(grammarAccess.getMarkPositionAccess().getNumNumParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkPosition__FirstlastAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMarkPositionAccess().getFirstlastFirstLastEnumRuleCall_1_0()); }
		ruleFirstLast
		{ after(grammarAccess.getMarkPositionAccess().getFirstlastFirstLastEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkValue__NumAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMarkValueAccess().getNumNumParserRuleCall_0()); }
		ruleNum
		{ after(grammarAccess.getMarkValueAccess().getNumNumParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiscardThreshold__HightlowAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiscardThresholdAccess().getHightlowHighLowEnumRuleCall_0_0()); }
		ruleHighLow
		{ after(grammarAccess.getDiscardThresholdAccess().getHightlowHighLowEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiscardThreshold__NumAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiscardThresholdAccess().getNumNumParserRuleCall_1_0()); }
		ruleNum
		{ after(grammarAccess.getDiscardThresholdAccess().getNumNumParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiscardHighest__HightlowAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiscardHighestAccess().getHightlowHighLowEnumRuleCall_0()); }
		ruleHighLow
		{ after(grammarAccess.getDiscardHighestAccess().getHightlowHighLowEnumRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiscardPosition__NumAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiscardPositionAccess().getNumNumParserRuleCall_0_0()); }
		ruleNum
		{ after(grammarAccess.getDiscardPositionAccess().getNumNumParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiscardPosition__FirstlastAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiscardPositionAccess().getFirstlastFirstLastEnumRuleCall_1_0()); }
		ruleFirstLast
		{ after(grammarAccess.getDiscardPositionAccess().getFirstlastFirstLastEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DiscardValue__NumAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiscardValueAccess().getNumNumParserRuleCall_0()); }
		ruleNum
		{ after(grammarAccess.getDiscardValueAccess().getNumNumParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RerollThreshold__HightlowAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRerollThresholdAccess().getHightlowHighLowEnumRuleCall_0_0()); }
		ruleHighLow
		{ after(grammarAccess.getRerollThresholdAccess().getHightlowHighLowEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RerollThreshold__NumAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRerollThresholdAccess().getNumNumParserRuleCall_1_0()); }
		ruleNum
		{ after(grammarAccess.getRerollThresholdAccess().getNumNumParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RerollHighest__HightlowAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRerollHighestAccess().getHightlowHighLowEnumRuleCall_0()); }
		ruleHighLow
		{ after(grammarAccess.getRerollHighestAccess().getHightlowHighLowEnumRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RerollPosition__NumAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRerollPositionAccess().getNumNumParserRuleCall_0_0()); }
		ruleNum
		{ after(grammarAccess.getRerollPositionAccess().getNumNumParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RerollPosition__FirstlastAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRerollPositionAccess().getFirstlastFirstLastEnumRuleCall_1_0()); }
		ruleFirstLast
		{ after(grammarAccess.getRerollPositionAccess().getFirstlastFirstLastEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RerollValue__NumAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRerollValueAccess().getNumNumParserRuleCall_0()); }
		ruleNum
		{ after(grammarAccess.getRerollValueAccess().getNumNumParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Num__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumAccess().getValueEIntParserRuleCall_0()); }
		ruleEInt
		{ after(grammarAccess.getNumAccess().getValueEIntParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_D : 'd';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
