/*
 * generated by Xtext 2.32.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Statement";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSumujParserRuleCall_0());
		}
		this_Sumuj_0=ruleSumuj
		{
			$current = $this_Sumuj_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSukcesyParserRuleCall_1());
		}
		this_Sukcesy_1=ruleSukcesy
		{
			$current = $this_Sukcesy_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSumuj
entryRuleSumuj returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSumujRule()); }
	iv_ruleSumuj=ruleSumuj
	{ $current=$iv_ruleSumuj.current; }
	EOF;

// Rule Sumuj
ruleSumuj returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SUMUJ'
		{
			newLeafNode(otherlv_0, grammarAccess.getSumujAccess().getSUMUJKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSumujAccess().getDiceexprsumDiceExprSumParserRuleCall_1_0());
				}
				lv_diceexprsum_1_0=ruleDiceExprSum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSumujRule());
					}
					add(
						$current,
						"diceexprsum",
						lv_diceexprsum_1_0,
						"org.xtext.example.mydsl.MyDsl.DiceExprSum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getSumujAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSumujAccess().getDiceexprsumDiceExprSumParserRuleCall_2_1_0());
					}
					lv_diceexprsum_3_0=ruleDiceExprSum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSumujRule());
						}
						add(
							$current,
							"diceexprsum",
							lv_diceexprsum_3_0,
							"org.xtext.example.mydsl.MyDsl.DiceExprSum");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getSumujAccess().getFullStopKeyword_3_0());
			}
			    |
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getSumujAccess().getCommaKeyword_3_1());
			}
		)?
	)
;

// Entry rule entryRuleSukcesy
entryRuleSukcesy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSukcesyRule()); }
	iv_ruleSukcesy=ruleSukcesy
	{ $current=$iv_ruleSukcesy.current; }
	EOF;

// Rule Sukcesy
ruleSukcesy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SUKCESY'
		{
			newLeafNode(otherlv_0, grammarAccess.getSukcesyAccess().getSUKCESYKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSukcesyAccess().getDiceexprsukDiceExprSukParserRuleCall_1_0());
				}
				lv_diceexprsuk_1_0=ruleDiceExprSuk
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSukcesyRule());
					}
					add(
						$current,
						"diceexprsuk",
						lv_diceexprsuk_1_0,
						"org.xtext.example.mydsl.MyDsl.DiceExprSuk");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getSukcesyAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSukcesyAccess().getDiceexprsukDiceExprSukParserRuleCall_2_1_0());
					}
					lv_diceexprsuk_3_0=ruleDiceExprSuk
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSukcesyRule());
						}
						add(
							$current,
							"diceexprsuk",
							lv_diceexprsuk_3_0,
							"org.xtext.example.mydsl.MyDsl.DiceExprSuk");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getSukcesyAccess().getFullStopKeyword_3_0());
			}
			    |
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getSukcesyAccess().getCommaKeyword_3_1());
			}
		)?
	)
;

// Entry rule entryRuleDiceExprSum
entryRuleDiceExprSum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiceExprSumRule()); }
	iv_ruleDiceExprSum=ruleDiceExprSum
	{ $current=$iv_ruleDiceExprSum.current; }
	EOF;

// Rule DiceExprSum
ruleDiceExprSum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='+'
			{
				newLeafNode(otherlv_0, grammarAccess.getDiceExprSumAccess().getPlusSignKeyword_0_0());
			}
			    |
			otherlv_1='-'
			{
				newLeafNode(otherlv_1, grammarAccess.getDiceExprSumAccess().getHyphenMinusKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDiceExprSumAccess().getMulexprMulExprParserRuleCall_1_0());
				}
				lv_mulexpr_2_0=ruleMulExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiceExprSumRule());
					}
					set(
						$current,
						"mulexpr",
						lv_mulexpr_2_0,
						"org.xtext.example.mydsl.MyDsl.MulExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getDiceExprSumAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDiceExprSumAccess().getSumruleRuleSumParserRuleCall_2_1_0());
					}
					lv_sumrule_4_0=ruleRuleSum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDiceExprSumRule());
						}
						add(
							$current,
							"sumrule",
							lv_sumrule_4_0,
							"org.xtext.example.mydsl.MyDsl.RuleSum");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getDiceExprSumAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDiceExprSumAccess().getSumruleRuleSumParserRuleCall_2_2_1_0());
						}
						lv_sumrule_6_0=ruleRuleSum
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDiceExprSumRule());
							}
							add(
								$current,
								"sumrule",
								lv_sumrule_6_0,
								"org.xtext.example.mydsl.MyDsl.RuleSum");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleDiceExprSuk
entryRuleDiceExprSuk returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiceExprSukRule()); }
	iv_ruleDiceExprSuk=ruleDiceExprSuk
	{ $current=$iv_ruleDiceExprSuk.current; }
	EOF;

// Rule DiceExprSuk
ruleDiceExprSuk returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='+'
			{
				newLeafNode(otherlv_0, grammarAccess.getDiceExprSukAccess().getPlusSignKeyword_0_0());
			}
			    |
			otherlv_1='-'
			{
				newLeafNode(otherlv_1, grammarAccess.getDiceExprSukAccess().getHyphenMinusKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDiceExprSukAccess().getMulexprMulExprParserRuleCall_1_0());
				}
				lv_mulexpr_2_0=ruleMulExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiceExprSukRule());
					}
					set(
						$current,
						"mulexpr",
						lv_mulexpr_2_0,
						"org.xtext.example.mydsl.MyDsl.MulExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getDiceExprSukAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDiceExprSukAccess().getSuccessruleRuleSukParserRuleCall_2_1_0());
					}
					lv_successrule_4_0=ruleRuleSuk
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDiceExprSukRule());
						}
						add(
							$current,
							"successrule",
							lv_successrule_4_0,
							"org.xtext.example.mydsl.MyDsl.RuleSuk");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getDiceExprSukAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDiceExprSukAccess().getSuccessruleRuleSukParserRuleCall_2_2_1_0());
						}
						lv_successrule_6_0=ruleRuleSuk
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDiceExprSukRule());
							}
							add(
								$current,
								"successrule",
								lv_successrule_6_0,
								"org.xtext.example.mydsl.MyDsl.RuleSuk");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleMulExpr
entryRuleMulExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulExprRule()); }
	iv_ruleMulExpr=ruleMulExpr
	{ $current=$iv_ruleMulExpr.current; }
	EOF;

// Rule MulExpr
ruleMulExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMulExprAccess().getFormexprFormParserRuleCall_0_0());
				}
				lv_formexpr_0_0=ruleForm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMulExprRule());
					}
					set(
						$current,
						"formexpr",
						lv_formexpr_0_0,
						"org.xtext.example.mydsl.MyDsl.Form");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getMulExprAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMulExprAccess().getFormexprFormParserRuleCall_1_1_0());
					}
					lv_formexpr_2_0=ruleForm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulExprRule());
						}
						set(
							$current,
							"formexpr",
							lv_formexpr_2_0,
							"org.xtext.example.mydsl.MyDsl.Form");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getMulExprAccess().getRightParenthesisKeyword_1_2());
			}
			(
				otherlv_4='razy'
				{
					newLeafNode(otherlv_4, grammarAccess.getMulExprAccess().getRazyKeyword_1_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMulExprAccess().getNumNumParserRuleCall_1_3_1_0());
						}
						lv_num_5_0=ruleNum
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMulExprRule());
							}
							set(
								$current,
								"num",
								lv_num_5_0,
								"org.xtext.example.mydsl.MyDsl.Num");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleForm
entryRuleForm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormRule()); }
	iv_ruleForm=ruleForm
	{ $current=$iv_ruleForm.current; }
	EOF;

// Rule Form
ruleForm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFormAccess().getLeftDiceParserRuleCall_0_0());
				}
				lv_left_0_0=ruleDice
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"org.xtext.example.mydsl.MyDsl.Dice");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFormAccess().getOperatorOperatorParserRuleCall_1_0_0());
					}
					lv_operator_1_0=ruleOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormRule());
						}
						set(
							$current,
							"operator",
							lv_operator_1_0,
							"org.xtext.example.mydsl.MyDsl.Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFormAccess().getRightNumParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleNum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"org.xtext.example.mydsl.MyDsl.Num");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSingleDice
entryRuleSingleDice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleDiceRule()); }
	iv_ruleSingleDice=ruleSingleDice
	{ $current=$iv_ruleSingleDice.current; }
	EOF;

// Rule SingleDice
ruleSingleDice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='d'
		{
			newLeafNode(otherlv_0, grammarAccess.getSingleDiceAccess().getDKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSingleDiceAccess().getSidesNumParserRuleCall_1_0());
				}
				lv_sides_1_0=ruleNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSingleDiceRule());
					}
					set(
						$current,
						"sides",
						lv_sides_1_0,
						"org.xtext.example.mydsl.MyDsl.Num");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMultiDice
entryRuleMultiDice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiDiceRule()); }
	iv_ruleMultiDice=ruleMultiDice
	{ $current=$iv_ruleMultiDice.current; }
	EOF;

// Rule MultiDice
ruleMultiDice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiDiceAccess().getCountNumParserRuleCall_0_0());
				}
				lv_count_0_0=ruleNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiDiceRule());
					}
					set(
						$current,
						"count",
						lv_count_0_0,
						"org.xtext.example.mydsl.MyDsl.Num");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='d'
		{
			newLeafNode(otherlv_1, grammarAccess.getMultiDiceAccess().getDKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiDiceAccess().getSidesNumParserRuleCall_2_0());
				}
				lv_sides_2_0=ruleNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiDiceRule());
					}
					set(
						$current,
						"sides",
						lv_sides_2_0,
						"org.xtext.example.mydsl.MyDsl.Num");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDice
entryRuleDice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiceRule()); }
	iv_ruleDice=ruleDice
	{ $current=$iv_ruleDice.current; }
	EOF;

// Rule Dice
ruleDice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDiceAccess().getSingleDiceParserRuleCall_0());
		}
		this_SingleDice_0=ruleSingleDice
		{
			$current = $this_SingleDice_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDiceAccess().getMultiDiceParserRuleCall_1());
		}
		this_MultiDice_1=ruleMultiDice
		{
			$current = $this_MultiDice_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExplosionRule
entryRuleExplosionRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExplosionRuleRule()); }
	iv_ruleExplosionRule=ruleExplosionRule
	{ $current=$iv_ruleExplosionRule.current; }
	EOF;

// Rule ExplosionRule
ruleExplosionRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='dodawaj'
			{
				newLeafNode(otherlv_0, grammarAccess.getExplosionRuleAccess().getDodawajKeyword_0_0());
			}
			    |
			otherlv_1='odejmuj'
			{
				newLeafNode(otherlv_1, grammarAccess.getExplosionRuleAccess().getOdejmujKeyword_0_1());
			}
		)
		otherlv_2='wybuchowe'
		{
			newLeafNode(otherlv_2, grammarAccess.getExplosionRuleAccess().getWybuchoweKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExplosionRuleAccess().getNumNumParserRuleCall_2_0());
				}
				lv_num_3_0=ruleNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExplosionRuleRule());
					}
					set(
						$current,
						"num",
						lv_num_3_0,
						"org.xtext.example.mydsl.MyDsl.Num");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDiceMarkSum
entryRuleDiceMarkSum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiceMarkSumRule()); }
	iv_ruleDiceMarkSum=ruleDiceMarkSum
	{ $current=$iv_ruleDiceMarkSum.current; }
	EOF;

// Rule DiceMarkSum
ruleDiceMarkSum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='oznacz'
		{
			newLeafNode(otherlv_0, grammarAccess.getDiceMarkSumAccess().getOznaczKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDiceMarkSumAccess().getMarkMarkParserRuleCall_1_0());
				}
				lv_mark_1_0=ruleMark
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiceMarkSumRule());
					}
					set(
						$current,
						"mark",
						lv_mark_1_0,
						"org.xtext.example.mydsl.MyDsl.Mark");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDiceDiscSum
entryRuleDiceDiscSum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiceDiscSumRule()); }
	iv_ruleDiceDiscSum=ruleDiceDiscSum
	{ $current=$iv_ruleDiceDiscSum.current; }
	EOF;

// Rule DiceDiscSum
ruleDiceDiscSum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='odrzuc'
		{
			newLeafNode(otherlv_0, grammarAccess.getDiceDiscSumAccess().getOdrzucKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDiceDiscSumAccess().getDiscardDiscardParserRuleCall_1_0());
				}
				lv_discard_1_0=ruleDiscard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiceDiscSumRule());
					}
					set(
						$current,
						"discard",
						lv_discard_1_0,
						"org.xtext.example.mydsl.MyDsl.Discard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDiceRerollSum
entryRuleDiceRerollSum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiceRerollSumRule()); }
	iv_ruleDiceRerollSum=ruleDiceRerollSum
	{ $current=$iv_ruleDiceRerollSum.current; }
	EOF;

// Rule DiceRerollSum
ruleDiceRerollSum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='przerzuc'
		{
			newLeafNode(otherlv_0, grammarAccess.getDiceRerollSumAccess().getPrzerzucKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDiceRerollSumAccess().getRerollRerollParserRuleCall_1_0());
				}
				lv_reroll_1_0=ruleReroll
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiceRerollSumRule());
					}
					set(
						$current,
						"reroll",
						lv_reroll_1_0,
						"org.xtext.example.mydsl.MyDsl.Reroll");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRuleSum
entryRuleRuleSum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleSumRule()); }
	iv_ruleRuleSum=ruleRuleSum
	{ $current=$iv_ruleRuleSum.current; }
	EOF;

// Rule RuleSum
ruleRuleSum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRuleSumAccess().getExplosionRuleParserRuleCall_0());
		}
		this_ExplosionRule_0=ruleExplosionRule
		{
			$current = $this_ExplosionRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleSumAccess().getDiceMarkSumParserRuleCall_1());
		}
		this_DiceMarkSum_1=ruleDiceMarkSum
		{
			$current = $this_DiceMarkSum_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleSumAccess().getDiceDiscSumParserRuleCall_2());
		}
		this_DiceDiscSum_2=ruleDiceDiscSum
		{
			$current = $this_DiceDiscSum_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleSumAccess().getDiceRerollSumParserRuleCall_3());
		}
		this_DiceRerollSum_3=ruleDiceRerollSum
		{
			$current = $this_DiceRerollSum_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSuccessThreshold
entryRuleSuccessThreshold returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSuccessThresholdRule()); }
	iv_ruleSuccessThreshold=ruleSuccessThreshold
	{ $current=$iv_ruleSuccessThreshold.current; }
	EOF;

// Rule SuccessThreshold
ruleSuccessThreshold returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sukces'
		{
			newLeafNode(otherlv_0, grammarAccess.getSuccessThresholdAccess().getSukcesKeyword_0());
		}
		(
			otherlv_1='wiecej niz'
			{
				newLeafNode(otherlv_1, grammarAccess.getSuccessThresholdAccess().getWiecejNizKeyword_1_0());
			}
			    |
			otherlv_2='mniej niz'
			{
				newLeafNode(otherlv_2, grammarAccess.getSuccessThresholdAccess().getMniejNizKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSuccessThresholdAccess().getNumNumParserRuleCall_2_0());
				}
				lv_num_3_0=ruleNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSuccessThresholdRule());
					}
					set(
						$current,
						"num",
						lv_num_3_0,
						"org.xtext.example.mydsl.MyDsl.Num");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSuccessMultiplier
entryRuleSuccessMultiplier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSuccessMultiplierRule()); }
	iv_ruleSuccessMultiplier=ruleSuccessMultiplier
	{ $current=$iv_ruleSuccessMultiplier.current; }
	EOF;

// Rule SuccessMultiplier
ruleSuccessMultiplier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sukces'
		{
			newLeafNode(otherlv_0, grammarAccess.getSuccessMultiplierAccess().getSukcesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSuccessMultiplierAccess().getNumNumParserRuleCall_1_0());
				}
				lv_num_1_0=ruleNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSuccessMultiplierRule());
					}
					set(
						$current,
						"num",
						lv_num_1_0,
						"org.xtext.example.mydsl.MyDsl.Num");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='razy'
		{
			newLeafNode(otherlv_2, grammarAccess.getSuccessMultiplierAccess().getRazyKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSuccessMultiplierAccess().getMultNumParserRuleCall_3_0());
				}
				lv_mult_3_0=ruleNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSuccessMultiplierRule());
					}
					set(
						$current,
						"mult",
						lv_mult_3_0,
						"org.xtext.example.mydsl.MyDsl.Num");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSuccessBasic
entryRuleSuccessBasic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSuccessBasicRule()); }
	iv_ruleSuccessBasic=ruleSuccessBasic
	{ $current=$iv_ruleSuccessBasic.current; }
	EOF;

// Rule SuccessBasic
ruleSuccessBasic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sukces'
		{
			newLeafNode(otherlv_0, grammarAccess.getSuccessBasicAccess().getSukcesKeyword_0());
		}
		(
			otherlv_1='sukces'
			{
				newLeafNode(otherlv_1, grammarAccess.getSuccessBasicAccess().getSukcesKeyword_1_0());
			}
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSuccessBasicAccess().getNumNumParserRuleCall_1_1_0());
					}
					lv_num_2_0=ruleNum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSuccessBasicRule());
						}
						set(
							$current,
							"num",
							lv_num_2_0,
							"org.xtext.example.mydsl.MyDsl.Num");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleDiceMarkSuk
entryRuleDiceMarkSuk returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiceMarkSukRule()); }
	iv_ruleDiceMarkSuk=ruleDiceMarkSuk
	{ $current=$iv_ruleDiceMarkSuk.current; }
	EOF;

// Rule DiceMarkSuk
ruleDiceMarkSuk returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='oznacz'
		{
			newLeafNode(otherlv_0, grammarAccess.getDiceMarkSukAccess().getOznaczKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDiceMarkSukAccess().getMarkMarkParserRuleCall_1_0());
				}
				lv_mark_1_0=ruleMark
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiceMarkSukRule());
					}
					set(
						$current,
						"mark",
						lv_mark_1_0,
						"org.xtext.example.mydsl.MyDsl.Mark");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDiceDiscSuk
entryRuleDiceDiscSuk returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiceDiscSukRule()); }
	iv_ruleDiceDiscSuk=ruleDiceDiscSuk
	{ $current=$iv_ruleDiceDiscSuk.current; }
	EOF;

// Rule DiceDiscSuk
ruleDiceDiscSuk returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='odrzuc'
		{
			newLeafNode(otherlv_0, grammarAccess.getDiceDiscSukAccess().getOdrzucKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDiceDiscSukAccess().getDiscardDiscardParserRuleCall_1_0());
				}
				lv_discard_1_0=ruleDiscard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiceDiscSukRule());
					}
					set(
						$current,
						"discard",
						lv_discard_1_0,
						"org.xtext.example.mydsl.MyDsl.Discard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDiceRerollSuk
entryRuleDiceRerollSuk returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiceRerollSukRule()); }
	iv_ruleDiceRerollSuk=ruleDiceRerollSuk
	{ $current=$iv_ruleDiceRerollSuk.current; }
	EOF;

// Rule DiceRerollSuk
ruleDiceRerollSuk returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='przerzuc'
		{
			newLeafNode(otherlv_0, grammarAccess.getDiceRerollSukAccess().getPrzerzucKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDiceRerollSukAccess().getRerollRerollParserRuleCall_1_0());
				}
				lv_reroll_1_0=ruleReroll
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiceRerollSukRule());
					}
					set(
						$current,
						"reroll",
						lv_reroll_1_0,
						"org.xtext.example.mydsl.MyDsl.Reroll");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRuleSuk
entryRuleRuleSuk returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleSukRule()); }
	iv_ruleRuleSuk=ruleRuleSuk
	{ $current=$iv_ruleRuleSuk.current; }
	EOF;

// Rule RuleSuk
ruleRuleSuk returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRuleSukAccess().getSuccessThresholdParserRuleCall_0());
		}
		this_SuccessThreshold_0=ruleSuccessThreshold
		{
			$current = $this_SuccessThreshold_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleSukAccess().getSuccessMultiplierParserRuleCall_1());
		}
		this_SuccessMultiplier_1=ruleSuccessMultiplier
		{
			$current = $this_SuccessMultiplier_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleSukAccess().getSuccessBasicParserRuleCall_2());
		}
		this_SuccessBasic_2=ruleSuccessBasic
		{
			$current = $this_SuccessBasic_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleSukAccess().getDiceMarkSukParserRuleCall_3());
		}
		this_DiceMarkSuk_3=ruleDiceMarkSuk
		{
			$current = $this_DiceMarkSuk_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleSukAccess().getDiceDiscSukParserRuleCall_4());
		}
		this_DiceDiscSuk_4=ruleDiceDiscSuk
		{
			$current = $this_DiceDiscSuk_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRuleSukAccess().getDiceRerollSukParserRuleCall_5());
		}
		this_DiceRerollSuk_5=ruleDiceRerollSuk
		{
			$current = $this_DiceRerollSuk_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMarkThreshold
entryRuleMarkThreshold returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMarkThresholdRule()); }
	iv_ruleMarkThreshold=ruleMarkThreshold
	{ $current=$iv_ruleMarkThreshold.current; }
	EOF;

// Rule MarkThreshold
ruleMarkThreshold returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='wiecej niz'
			{
				newLeafNode(otherlv_0, grammarAccess.getMarkThresholdAccess().getWiecejNizKeyword_0_0());
			}
			    |
			otherlv_1='mniej niz'
			{
				newLeafNode(otherlv_1, grammarAccess.getMarkThresholdAccess().getMniejNizKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMarkThresholdAccess().getNumNumParserRuleCall_1_0());
				}
				lv_num_2_0=ruleNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMarkThresholdRule());
					}
					set(
						$current,
						"num",
						lv_num_2_0,
						"org.xtext.example.mydsl.MyDsl.Num");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMarkHighest
entryRuleMarkHighest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMarkHighestRule()); }
	iv_ruleMarkHighest=ruleMarkHighest
	{ $current=$iv_ruleMarkHighest.current; }
	EOF;

// Rule MarkHighest
ruleMarkHighest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='najwyzsze'
		{
			newLeafNode(otherlv_0, grammarAccess.getMarkHighestAccess().getNajwyzszeKeyword_0());
		}
		    |
		otherlv_1='najnizsze'
		{
			newLeafNode(otherlv_1, grammarAccess.getMarkHighestAccess().getNajnizszeKeyword_1());
		}
	)
;

// Entry rule entryRuleMarkPosition
entryRuleMarkPosition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMarkPositionRule()); }
	iv_ruleMarkPosition=ruleMarkPosition
	{ $current=$iv_ruleMarkPosition.current; }
	EOF;

// Rule MarkPosition
ruleMarkPosition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMarkPositionAccess().getFirstlastFirstLastParserRuleCall_0_0());
				}
				lv_firstlast_0_0=ruleFirstLast
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMarkPositionRule());
					}
					set(
						$current,
						"firstlast",
						lv_firstlast_0_0,
						"org.xtext.example.mydsl.MyDsl.FirstLast");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMarkPositionAccess().getNumNumParserRuleCall_1_0());
				}
				lv_num_1_0=ruleNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMarkPositionRule());
					}
					set(
						$current,
						"num",
						lv_num_1_0,
						"org.xtext.example.mydsl.MyDsl.Num");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMarkValue
entryRuleMarkValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMarkValueRule()); }
	iv_ruleMarkValue=ruleMarkValue
	{ $current=$iv_ruleMarkValue.current; }
	EOF;

// Rule MarkValue
ruleMarkValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMarkValueAccess().getNumNumParserRuleCall_0());
			}
			lv_num_0_0=ruleNum
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMarkValueRule());
				}
				set(
					$current,
					"num",
					lv_num_0_0,
					"org.xtext.example.mydsl.MyDsl.Num");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMark
entryRuleMark returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMarkRule()); }
	iv_ruleMark=ruleMark
	{ $current=$iv_ruleMark.current; }
	EOF;

// Rule Mark
ruleMark returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMarkAccess().getMarkThresholdParserRuleCall_0());
		}
		this_MarkThreshold_0=ruleMarkThreshold
		{
			$current = $this_MarkThreshold_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMarkAccess().getMarkHighestParserRuleCall_1());
		}
		this_MarkHighest_1=ruleMarkHighest
		{
			$current = $this_MarkHighest_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMarkAccess().getMarkPositionParserRuleCall_2());
		}
		this_MarkPosition_2=ruleMarkPosition
		{
			$current = $this_MarkPosition_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMarkAccess().getMarkValueParserRuleCall_3());
		}
		this_MarkValue_3=ruleMarkValue
		{
			$current = $this_MarkValue_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDiscardThreshold
entryRuleDiscardThreshold returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiscardThresholdRule()); }
	iv_ruleDiscardThreshold=ruleDiscardThreshold
	{ $current=$iv_ruleDiscardThreshold.current; }
	EOF;

// Rule DiscardThreshold
ruleDiscardThreshold returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='wiecej niz'
			{
				newLeafNode(otherlv_0, grammarAccess.getDiscardThresholdAccess().getWiecejNizKeyword_0_0());
			}
			    |
			otherlv_1='mniej niz'
			{
				newLeafNode(otherlv_1, grammarAccess.getDiscardThresholdAccess().getMniejNizKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDiscardThresholdAccess().getNumNumParserRuleCall_1_0());
				}
				lv_num_2_0=ruleNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiscardThresholdRule());
					}
					set(
						$current,
						"num",
						lv_num_2_0,
						"org.xtext.example.mydsl.MyDsl.Num");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDiscardHighest
entryRuleDiscardHighest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiscardHighestRule()); }
	iv_ruleDiscardHighest=ruleDiscardHighest
	{ $current=$iv_ruleDiscardHighest.current; }
	EOF;

// Rule DiscardHighest
ruleDiscardHighest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='najwyzsze'
		{
			newLeafNode(otherlv_0, grammarAccess.getDiscardHighestAccess().getNajwyzszeKeyword_0());
		}
		    |
		otherlv_1='najnizsze'
		{
			newLeafNode(otherlv_1, grammarAccess.getDiscardHighestAccess().getNajnizszeKeyword_1());
		}
	)
;

// Entry rule entryRuleDiscardPosition
entryRuleDiscardPosition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiscardPositionRule()); }
	iv_ruleDiscardPosition=ruleDiscardPosition
	{ $current=$iv_ruleDiscardPosition.current; }
	EOF;

// Rule DiscardPosition
ruleDiscardPosition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDiscardPositionAccess().getFirstlastFirstLastParserRuleCall_0_0());
				}
				lv_firstlast_0_0=ruleFirstLast
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiscardPositionRule());
					}
					set(
						$current,
						"firstlast",
						lv_firstlast_0_0,
						"org.xtext.example.mydsl.MyDsl.FirstLast");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDiscardPositionAccess().getNumNumParserRuleCall_1_0());
				}
				lv_num_1_0=ruleNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDiscardPositionRule());
					}
					set(
						$current,
						"num",
						lv_num_1_0,
						"org.xtext.example.mydsl.MyDsl.Num");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDiscardValue
entryRuleDiscardValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiscardValueRule()); }
	iv_ruleDiscardValue=ruleDiscardValue
	{ $current=$iv_ruleDiscardValue.current; }
	EOF;

// Rule DiscardValue
ruleDiscardValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDiscardValueAccess().getNumNumParserRuleCall_0());
			}
			lv_num_0_0=ruleNum
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDiscardValueRule());
				}
				set(
					$current,
					"num",
					lv_num_0_0,
					"org.xtext.example.mydsl.MyDsl.Num");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleDiscard
entryRuleDiscard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiscardRule()); }
	iv_ruleDiscard=ruleDiscard
	{ $current=$iv_ruleDiscard.current; }
	EOF;

// Rule Discard
ruleDiscard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDiscardAccess().getDiscardThresholdParserRuleCall_0());
		}
		this_DiscardThreshold_0=ruleDiscardThreshold
		{
			$current = $this_DiscardThreshold_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDiscardAccess().getDiscardHighestParserRuleCall_1());
		}
		this_DiscardHighest_1=ruleDiscardHighest
		{
			$current = $this_DiscardHighest_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDiscardAccess().getDiscardPositionParserRuleCall_2());
		}
		this_DiscardPosition_2=ruleDiscardPosition
		{
			$current = $this_DiscardPosition_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDiscardAccess().getDiscardValueParserRuleCall_3());
		}
		this_DiscardValue_3=ruleDiscardValue
		{
			$current = $this_DiscardValue_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRerollThreshold
entryRuleRerollThreshold returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRerollThresholdRule()); }
	iv_ruleRerollThreshold=ruleRerollThreshold
	{ $current=$iv_ruleRerollThreshold.current; }
	EOF;

// Rule RerollThreshold
ruleRerollThreshold returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='wiecej niz'
			{
				newLeafNode(otherlv_0, grammarAccess.getRerollThresholdAccess().getWiecejNizKeyword_0_0());
			}
			    |
			otherlv_1='mniej niz'
			{
				newLeafNode(otherlv_1, grammarAccess.getRerollThresholdAccess().getMniejNizKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRerollThresholdAccess().getNumNumParserRuleCall_1_0());
				}
				lv_num_2_0=ruleNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRerollThresholdRule());
					}
					set(
						$current,
						"num",
						lv_num_2_0,
						"org.xtext.example.mydsl.MyDsl.Num");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRerollHighest
entryRuleRerollHighest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRerollHighestRule()); }
	iv_ruleRerollHighest=ruleRerollHighest
	{ $current=$iv_ruleRerollHighest.current; }
	EOF;

// Rule RerollHighest
ruleRerollHighest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='najwyzsze'
		{
			newLeafNode(otherlv_0, grammarAccess.getRerollHighestAccess().getNajwyzszeKeyword_0());
		}
		    |
		otherlv_1='najnizsze'
		{
			newLeafNode(otherlv_1, grammarAccess.getRerollHighestAccess().getNajnizszeKeyword_1());
		}
	)
;

// Entry rule entryRuleRerollPosition
entryRuleRerollPosition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRerollPositionRule()); }
	iv_ruleRerollPosition=ruleRerollPosition
	{ $current=$iv_ruleRerollPosition.current; }
	EOF;

// Rule RerollPosition
ruleRerollPosition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRerollPositionAccess().getFirstlastFirstLastParserRuleCall_0_0());
				}
				lv_firstlast_0_0=ruleFirstLast
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRerollPositionRule());
					}
					set(
						$current,
						"firstlast",
						lv_firstlast_0_0,
						"org.xtext.example.mydsl.MyDsl.FirstLast");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRerollPositionAccess().getNumNumParserRuleCall_1_0());
				}
				lv_num_1_0=ruleNum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRerollPositionRule());
					}
					set(
						$current,
						"num",
						lv_num_1_0,
						"org.xtext.example.mydsl.MyDsl.Num");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRerollValue
entryRuleRerollValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRerollValueRule()); }
	iv_ruleRerollValue=ruleRerollValue
	{ $current=$iv_ruleRerollValue.current; }
	EOF;

// Rule RerollValue
ruleRerollValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRerollValueAccess().getNumNumParserRuleCall_0());
			}
			lv_num_0_0=ruleNum
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getRerollValueRule());
				}
				set(
					$current,
					"num",
					lv_num_0_0,
					"org.xtext.example.mydsl.MyDsl.Num");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleReroll
entryRuleReroll returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRerollRule()); }
	iv_ruleReroll=ruleReroll
	{ $current=$iv_ruleReroll.current; }
	EOF;

// Rule Reroll
ruleReroll returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRerollAccess().getRerollThresholdParserRuleCall_0());
		}
		this_RerollThreshold_0=ruleRerollThreshold
		{
			$current = $this_RerollThreshold_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRerollAccess().getRerollHighestParserRuleCall_1());
		}
		this_RerollHighest_1=ruleRerollHighest
		{
			$current = $this_RerollHighest_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRerollAccess().getRerollPositionParserRuleCall_2());
		}
		this_RerollPosition_2=ruleRerollPosition
		{
			$current = $this_RerollPosition_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRerollAccess().getRerollValueParserRuleCall_3());
		}
		this_RerollValue_3=ruleRerollValue
		{
			$current = $this_RerollValue_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNum
entryRuleNum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumRule()); }
	iv_ruleNum=ruleNum
	{ $current=$iv_ruleNum.current; }
	EOF;

// Rule Num
ruleNum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Num'
		{
			newLeafNode(otherlv_0, grammarAccess.getNumAccess().getNumKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='value'
		{
			newLeafNode(otherlv_2, grammarAccess.getNumAccess().getValueKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumAccess().getValueEIntParserRuleCall_3_0());
				}
				lv_value_3_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.xtext.example.mydsl.MyDsl.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getNumAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleFirstLast
entryRuleFirstLast returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFirstLastRule()); }
	iv_ruleFirstLast=ruleFirstLast
	{ $current=$iv_ruleFirstLast.current.getText(); }
	EOF;

// Rule FirstLast
ruleFirstLast returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='FIRST'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFirstLastAccess().getFIRSTKeyword_0());
		}
		    |
		kw='LAST'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFirstLastAccess().getLASTKeyword_1());
		}
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current.getText(); }
	EOF;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getAsteriskKeyword_2());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getSolidusKeyword_3());
		}
		    |
		kw='razy'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getRazyKeyword_4());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
